
> search-admin-fe@0.0.0 lint
> eslint . --format json

[{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\eslint.config.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\App.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dashboard\\components\\AnalyticsCharts.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1303,1306],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1303,1306],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":69,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1675,1678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1675,1678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { memo } from 'react'\r\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\r\nimport { ChartContainer } from '@/components/ui/chart'\r\nimport { Skeleton } from '@/components/ui/skeleton'\r\nimport {\r\n  XAxis,\r\n  YAxis,\r\n  CartesianGrid,\r\n  ResponsiveContainer,\r\n  Tooltip,\r\n  LineChart,\r\n  Line,\r\n} from 'recharts'\r\n\r\ninterface ResponseTimeData {\r\n  date: string\r\n  responseTime: number\r\n}\r\n\r\ninterface SearchVolumeData {\r\n  date: string\r\n  searches: number\r\n  successfulSearches: number\r\n  failedSearches: number\r\n}\r\n\r\ninterface AnalyticsChartsProps {\r\n  responseTimeData: ResponseTimeData[]\r\n  searchVolumeData: SearchVolumeData[]\r\n  loading: boolean\r\n}\r\n\r\nconst CHART_CONFIG = {\r\n  responseTime: {\r\n    label: '응답시간',\r\n    color: '#4f46e5',\r\n  },\r\n  successfulSearches: {\r\n    label: '성공',\r\n    color: '#10b981',\r\n  },\r\n  failedSearches: {\r\n    label: '실패',\r\n    color: '#ef4444',\r\n  },\r\n} as const\r\n\r\nconst ChartSkeleton = memo(() => (\r\n  <div className=\"h-full w-full p-2\">\r\n    <Skeleton className=\"h-full w-full\" />\r\n  </div>\r\n))\r\n\r\nChartSkeleton.displayName = 'ChartSkeleton'\r\n\r\nconst formatDateTick = (value: string) => {\r\n  const date = new Date(value)\r\n  return `${date.getMonth() + 1}/${date.getDate()}`\r\n}\r\n\r\nconst CustomTooltip = ({ active, payload, label }: any) => {\r\n  if (active && payload && payload.length) {\r\n    const date = new Date(label)\r\n    const formattedDate = `${date.getMonth() + 1}/${date.getDate()}`\r\n    \r\n    return (\r\n      <div className=\"bg-white p-2 border border-gray-200 rounded shadow-sm text-xs\">\r\n        <p className=\"font-medium text-gray-700 mb-1\">{formattedDate}</p>\r\n        {payload.map((entry: any, index: number) => (\r\n          <p key={index} className=\"text-gray-600\" style={{ color: entry.color }}>\r\n            {entry.name}: {entry.name.includes('시간') ? `${entry.value}ms` : entry.value.toLocaleString()}\r\n          </p>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n  return null\r\n}\r\n\r\nconst ResponseTimeChart = memo(({ data }: { data: ResponseTimeData[] }) => (\r\n  <ChartContainer config={{ responseTime: CHART_CONFIG.responseTime }} className=\"h-full w-full\">\r\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n      <LineChart data={data} margin={{ top: 10, right: 10, left: -5, bottom: 10 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" vertical={false} />\r\n        <XAxis\r\n          dataKey=\"date\"\r\n          tickLine={false}\r\n          axisLine={false}\r\n          fontSize={11}\r\n          tickFormatter={formatDateTick}\r\n        />\r\n        <YAxis\r\n          tickLine={false}\r\n          axisLine={false}\r\n          fontSize={11}\r\n          width={35}\r\n        />\r\n        <Tooltip content={<CustomTooltip />} />\r\n        <Line\r\n          dataKey=\"responseTime\"\r\n          name=\"응답시간\"\r\n          type=\"monotone\"\r\n          stroke={CHART_CONFIG.responseTime.color}\r\n          strokeWidth={2}\r\n          dot={{ fill: CHART_CONFIG.responseTime.color, r: 3 }}\r\n        />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  </ChartContainer>\r\n))\r\n\r\nResponseTimeChart.displayName = 'ResponseTimeChart'\r\n\r\nconst SearchVolumeChart = memo(({ data }: { data: SearchVolumeData[] }) => (\r\n  <ChartContainer\r\n    config={{\r\n      successfulSearches: CHART_CONFIG.successfulSearches,\r\n      failedSearches: CHART_CONFIG.failedSearches,\r\n    }}\r\n    className=\"h-full w-full\"\r\n  >\r\n    <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n      <LineChart data={data} margin={{ top: 10, right: 10, left: -5, bottom: 10 }}>\r\n        <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" vertical={false} />\r\n        <XAxis\r\n          dataKey=\"date\"\r\n          tickLine={false}\r\n          axisLine={false}\r\n          fontSize={11}\r\n          tickFormatter={formatDateTick}\r\n        />\r\n        <YAxis \r\n          tickLine={false} \r\n          axisLine={false} \r\n          fontSize={11}\r\n          width={35}\r\n        />\r\n        <Tooltip content={<CustomTooltip />} />\r\n        <Line\r\n          dataKey=\"successfulSearches\"\r\n          name=\"성공\"\r\n          type=\"monotone\"\r\n          stroke={CHART_CONFIG.successfulSearches.color}\r\n          strokeWidth={2}\r\n          dot={{ fill: CHART_CONFIG.successfulSearches.color, r: 3 }}\r\n        />\r\n        <Line\r\n          dataKey=\"failedSearches\"\r\n          name=\"실패\"\r\n          type=\"monotone\"\r\n          stroke={CHART_CONFIG.failedSearches.color}\r\n          strokeWidth={2}\r\n          dot={{ fill: CHART_CONFIG.failedSearches.color, r: 3 }}\r\n        />\r\n      </LineChart>\r\n    </ResponsiveContainer>\r\n  </ChartContainer>\r\n))\r\n\r\nSearchVolumeChart.displayName = 'SearchVolumeChart'\r\n\r\nexport default memo(function AnalyticsCharts({\r\n  responseTimeData,\r\n  searchVolumeData,\r\n  loading,\r\n}: AnalyticsChartsProps) {\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3\">\r\n      <Card className=\"border border-gray-200 shadow-sm\">\r\n        <CardHeader className=\"pb-3\">\r\n          <CardTitle className=\"text-base font-semibold\">검색량 추이</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"h-64\">\r\n            {loading ? (\r\n              <ChartSkeleton />\r\n            ) : searchVolumeData.length === 0 ? (\r\n              <div className=\"flex items-center justify-center h-full text-muted-foreground\">\r\n                데이터 없음\r\n              </div>\r\n            ) : (\r\n              <SearchVolumeChart data={searchVolumeData} />\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card className=\"border border-gray-200 shadow-sm\">\r\n        <CardHeader className=\"pb-3\">\r\n          <CardTitle className=\"text-base font-semibold\">검색 응답시간</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"h-64\">\r\n            {loading ? (\r\n              <ChartSkeleton />\r\n            ) : responseTimeData.length === 0 ? (\r\n              <div className=\"flex items-center justify-center h-full text-muted-foreground\">\r\n                데이터 없음\r\n              </div>\r\n            ) : (\r\n              <ResponseTimeChart data={responseTimeData} />\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  )\r\n})","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dashboard\\components\\DashboardHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dashboard\\components\\DistributionChart.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dashboard\\components\\KeywordsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dashboard\\components\\StatsCards.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dashboard\\constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dashboard\\hooks\\use-dashboard-transformers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":54,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":54,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2015,2018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2015,2018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2238,2241],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2238,2241],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useCallback } from 'react'\r\nimport type {\r\n  DashboardStats,\r\n  TrendsResponse,\r\n  PopularKeywordItem,\r\n  TrendingKeywordItem,\r\n  StatItem,\r\n} from '@/services'\r\nimport { DASHBOARD_CONSTANTS } from '../constants'\r\n\r\nexport interface TopKeyword {\r\n  keyword: string\r\n  searches: number\r\n  ctr: string\r\n  trend: 'up' | 'down' | 'stable' | 'new'\r\n  percentage?: number\r\n  rank?: number\r\n}\r\n\r\nexport function useDashboardTransformers() {\r\n  const convertStatsToStatItems = useCallback((dashboardStats: DashboardStats | null | undefined): StatItem[] => {\r\n    if (!dashboardStats) {\r\n      return [\r\n        { label: '검색량', value: '0' },\r\n        { label: '검색0건', value: '0%' },\r\n        { label: '에러건수', value: '0' },\r\n        { label: '평균응답시간', value: '0ms' },\r\n        { label: '성공률', value: '0%' },\r\n        { label: '클릭수', value: '0' },\r\n        { label: 'CTR', value: '0%' },\r\n      ]\r\n    }\r\n    \r\n    const successRate = dashboardStats.successRate ?? 0\r\n    const successRateDisplay = successRate >= 100 ? '100%' : `${successRate.toFixed(2)}%`\r\n\r\n    return [\r\n      { label: '검색량', value: (dashboardStats.totalSearchCount || 0).toLocaleString() },\r\n      { label: '검색0건', value: `${(dashboardStats.zeroHitRate || 0).toFixed(1)}%` },\r\n      { label: '에러건수', value: (dashboardStats.errorCount || 0).toLocaleString() },\r\n      { label: '평균응답시간', value: `${Math.round(dashboardStats.averageResponseTimeMs || 0)}ms` },\r\n      { label: '성공률', value: successRateDisplay },\r\n      { label: '클릭수', value: (dashboardStats.clickCount || 0).toLocaleString() },\r\n      { label: 'CTR', value: `${(dashboardStats.clickThroughRate || 0).toFixed(1)}%` },\r\n    ]\r\n  }, [])\r\n\r\n  const convertTrendsToChartData = useCallback((trendsData: TrendsResponse | null | undefined) => {\r\n    if (!trendsData || !trendsData.searchVolumeData || !trendsData.responseTimeData) {\r\n      return { responseTimeData: [], searchVolumeData: [] }\r\n    }\r\n\r\n    // 응답시간 데이터\r\n    const responseTimeData = trendsData.responseTimeData.map((item: any) => ({\r\n      date: item.timestamp,\r\n      responseTime: item.averageResponseTime,\r\n    }))\r\n\r\n    // 검색량 데이터 (백엔드 제공 필드 반영: searchCount, errorCount)\r\n    const searchVolumeData = trendsData.searchVolumeData.map((item: any) => {\r\n      const total = Number(item.searchCount) || 0\r\n      const errorCount = Number(item.errorCount) || 0\r\n      const success = Math.max(total - errorCount, 0)\r\n      return {\r\n        date: item.timestamp,\r\n        searches: total,\r\n        successfulSearches: success,\r\n        failedSearches: errorCount,\r\n      }\r\n    })\r\n\r\n    return { responseTimeData, searchVolumeData }\r\n  }, [])\r\n\r\n  const convertPopularKeywordsToTableData = useCallback(\r\n    (keywords: PopularKeywordItem[] | null | undefined): TopKeyword[] => {\r\n      if (!keywords || !Array.isArray(keywords)) {\r\n        return []\r\n      }\r\n      \r\n      return keywords.map((item) => ({\r\n        keyword: item.keyword,\r\n        searches: item.count,\r\n        ctr: `${(item.clickThroughRate).toFixed(1)}%`,\r\n        trend: item.changeStatus === 'UP' ? 'up' : item.changeStatus === 'DOWN' ? 'down' : item.changeStatus === 'NEW' ? 'new' : 'stable',\r\n        percentage: item.percentage,\r\n        rank: item.rank,\r\n      }))\r\n    },\r\n    []\r\n  )\r\n\r\n  const convertTrendingKeywordsToTableData = useCallback(\r\n    (keywords: TrendingKeywordItem[] | null | undefined): TopKeyword[] => {\r\n      if (!keywords || !Array.isArray(keywords)) {\r\n        return []\r\n      }\r\n      \r\n      return keywords.map((item) => ({\r\n        keyword: item.keyword,\r\n        searches: item.count,\r\n        ctr: `${(item.clickThroughRate).toFixed(1)}%`,\r\n        trend: item.changeStatus === 'UP' ? 'up' : item.changeStatus === 'DOWN' ? 'down' : item.changeStatus === 'NEW' ? 'new' : 'stable',\r\n        percentage: item.percentage,\r\n        rank: item.rank,\r\n      }))\r\n    },\r\n    []\r\n  )\r\n\r\n  const mergeKeywords = useCallback(\r\n    (popularKeywords: PopularKeywordItem[] | null | undefined, trendingKeywords: TrendingKeywordItem[] | null | undefined): TopKeyword[] => {\r\n      const popular = convertPopularKeywordsToTableData(popularKeywords || [])\r\n      const trending = convertTrendingKeywordsToTableData(trendingKeywords || [])\r\n\r\n      const keywordMap = new Map<string, TopKeyword>()\r\n      \r\n      popular.forEach((item) => keywordMap.set(item.keyword, item))\r\n      trending.forEach((item) => {\r\n        if (!keywordMap.has(item.keyword)) {\r\n          keywordMap.set(item.keyword, item)\r\n        }\r\n      })\r\n\r\n      return Array.from(keywordMap.values())\r\n        .slice(0, DASHBOARD_CONSTANTS.MAX_KEYWORDS_DISPLAY)\r\n    },\r\n    [convertPopularKeywordsToTableData, convertTrendingKeywordsToTableData]\r\n  )\r\n\r\n  return {\r\n    convertStatsToStatItems,\r\n    convertTrendsToChartData,\r\n    convertPopularKeywordsToTableData,\r\n    convertTrendingKeywordsToTableData,\r\n    mergeKeywords,\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dashboard\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[802,805],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[802,805],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useMemo, useCallback, useState } from 'react'\r\nimport type { DateRange } from 'react-day-picker'\r\nimport { useDashboardData } from '@/hooks/use-dashboard'\r\nimport { useDashboardTransformers } from './hooks/use-dashboard-transformers'\r\nimport { DASHBOARD_CONSTANTS } from './constants'\r\nimport DashboardHeader from './components/DashboardHeader'\r\nimport StatsCards from './components/StatsCards'\r\nimport AnalyticsCharts from './components/AnalyticsCharts'\r\nimport KeywordsTable from './components/KeywordsTable'\r\n\r\nexport default function DashboardPage() {\r\n  const [dateRange, setDateRange] = useState<DateRange>({\r\n    from: DASHBOARD_CONSTANTS.getDefaultDateRange().from,\r\n    to: DASHBOARD_CONSTANTS.getDefaultDateRange().to,\r\n  })\r\n\r\n  const apiParams = useMemo(() => {\r\n    const params: any = {}\r\n    \r\n    if (dateRange.from) {\r\n      const fromDate = new Date(dateRange.from)\r\n      const year = fromDate.getFullYear()\r\n      const month = String(fromDate.getMonth() + 1).padStart(2, '0')\r\n      const day = String(fromDate.getDate()).padStart(2, '0')\r\n      params.from = `${year}-${month}-${day}T00:00:00`\r\n    }\r\n    \r\n    if (dateRange.to) {\r\n      const toDate = new Date(dateRange.to)\r\n      const year = toDate.getFullYear()\r\n      const month = String(toDate.getMonth() + 1).padStart(2, '0')\r\n      const day = String(toDate.getDate()).padStart(2, '0')\r\n      params.to = `${year}-${month}-${day}T23:59:59`\r\n    }\r\n    \r\n    return params\r\n  }, [dateRange])\r\n\r\n  const dashboardData = useDashboardData(apiParams)\r\n  const transformers = useDashboardTransformers()\r\n\r\n  const stats = useMemo(() => \r\n    dashboardData.stats.data \r\n      ? transformers.convertStatsToStatItems(dashboardData.stats.data) \r\n      : []\r\n  , [dashboardData.stats.data, transformers])\r\n\r\n  const { responseTimeData, searchVolumeData } = useMemo(() => \r\n    dashboardData.trends.data \r\n      ? transformers.convertTrendsToChartData(dashboardData.trends.data) \r\n      : { responseTimeData: [], searchVolumeData: [] }\r\n  , [dashboardData.trends.data, transformers])\r\n\r\n\r\n  const popularKeywords = useMemo(() => {\r\n    const keywords = dashboardData.popularKeywords.data?.keywords || []\r\n    return transformers.convertPopularKeywordsToTableData(keywords)\r\n  }, [dashboardData.popularKeywords.data, transformers])\r\n\r\n  const trendingKeywords = useMemo(() => {\r\n    const keywords = dashboardData.trendingKeywords.data?.keywords || []\r\n    return transformers.convertTrendingKeywordsToTableData(keywords)\r\n  }, [dashboardData.trendingKeywords.data, transformers])\r\n\r\n  const handleRefresh = useCallback(() => {\r\n    Object.values(dashboardData).forEach(query => {\r\n      if (query && typeof query === 'object' && 'refetch' in query) {\r\n        query.refetch()\r\n      }\r\n    })\r\n  }, [dashboardData])\r\n\r\n  const isLoading = Object.values(dashboardData).some(query => {\r\n    return query && typeof query === 'object' && 'isLoading' in query && query.isLoading\r\n  })\r\n\r\n  return (\r\n    <div className=\"p-4 space-y-3\">\r\n        <DashboardHeader\r\n          dateRange={dateRange}\r\n          setDateRange={setDateRange}\r\n          onRefresh={handleRefresh}\r\n          loading={isLoading}\r\n          lastUpdated={new Date()}\r\n        />\r\n        \r\n        <StatsCards stats={stats} loading={isLoading} />\r\n        \r\n        <div className=\"space-y-3\">\r\n          <AnalyticsCharts\r\n            responseTimeData={responseTimeData}\r\n            searchVolumeData={searchVolumeData}\r\n            loading={isLoading}\r\n          />\r\n          \r\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-3\">\r\n            <KeywordsTable \r\n              keywords={popularKeywords} \r\n              loading={isLoading}\r\n              title=\"인기 검색어 TOP 10\"\r\n              type=\"popular\"\r\n            />\r\n            <KeywordsTable \r\n              keywords={trendingKeywords} \r\n              loading={isLoading}\r\n              title=\"급등 검색어 TOP 10\"\r\n              type=\"trending\"\r\n            />\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\deploy\\components\\DeploymentHistory.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\deploy\\components\\EnvironmentOverview.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\deploy\\page.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'startIndexingMonitoring'. Either include it or remove the dependency array.","line":76,"column":6,"nodeType":"ArrayExpression","endLine":76,"endColumn":49,"suggestions":[{"desc":"Update the dependencies array to be: [fetchEnvironments, fetchDeploymentHistory, startIndexingMonitoring]","fix":{"range":[2499,2542],"text":"[fetchEnvironments, fetchDeploymentHistory, startIndexingMonitoring]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'toast'. Either include it or remove the dependency array.","line":243,"column":6,"nodeType":"ArrayExpression","endLine":243,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [fetchDeploymentHistory, toast]","fix":{"range":[7677,7701],"text":"[fetchDeploymentHistory, toast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect, useCallback } from 'react'\r\nimport type { Environment, DeployHistory } from '@/types/deploy'\r\nimport { deploymentService } from '@/services'\r\nimport { useToast } from '@/components/ui/use-toast'\r\nimport { logger } from '@/lib/logger'\r\nimport EnvironmentOverview from './components/EnvironmentOverview'\r\nimport DeploymentHistory from './components/DeploymentHistory'\r\n\r\nconst formatNumber = (num: number) => {\r\n  return new Intl.NumberFormat('ko-KR').format(num)\r\n}\r\n\r\nexport default function DeployManagement() {\r\n  const [environments, setEnvironments] = useState<Environment[]>([])\r\n  const [deployHistory, setDeployHistory] = useState<DeployHistory[]>([])\r\n  const [isLoading, setIsLoading] = useState(true)\r\n  const [isIndexing, setIsIndexing] = useState(false)\r\n  const [isDeploying, setIsDeploying] = useState(false)\r\n  const { toast } = useToast()\r\n\r\n  // 개발 환경이 색인 중인지 확인하는 헬퍼 함수\r\n  const checkIfIndexing = (envs: Environment[]) => {\r\n    const devEnv = envs.find(env => env.environmentType === 'DEV')\r\n    // indexStatus가 'IN_PROGRESS'이면 색인 중\r\n    return devEnv?.indexStatus === 'IN_PROGRESS' || devEnv?.isIndexing || false\r\n  }\r\n\r\n  // 환경 정보 조회\r\n  const fetchEnvironments = useCallback(async () => {\r\n    try {\r\n      const response = await deploymentService.getEnvironments()\r\n      setEnvironments(response.environments)\r\n      \r\n      // 백엔드 상태로 로컬 색인 상태 동기화\r\n      const isCurrentlyIndexing = checkIfIndexing(response.environments)\r\n      setIsIndexing(isCurrentlyIndexing)\r\n      \r\n      return response.environments\r\n    } catch (error) {\r\n      logger.error('환경 정보 조회 실패', error as Error)\r\n      return []\r\n    }\r\n  }, [])\r\n\r\n  // 배포 이력 조회\r\n  const fetchDeploymentHistory = useCallback(async () => {\r\n    try {\r\n      const response = await deploymentService.getDeploymentHistory({\r\n        page: 0,\r\n        size: 20,\r\n        sort: 'createdAt,desc'\r\n      })\r\n      setDeployHistory(response.deploymentHistories)\r\n    } catch (error) {\r\n      logger.error('배포 이력 조회 실패', error as Error)\r\n    }\r\n  }, [])\r\n\r\n  // 초기 데이터 로드\r\n  useEffect(() => {\r\n    const loadInitialData = async () => {\r\n      setIsLoading(true)\r\n      const envs = await fetchEnvironments()\r\n      await fetchDeploymentHistory()\r\n      \r\n      // 페이지 로드 시 색인 중이면 모니터링 시작\r\n      if (checkIfIndexing(envs)) {\r\n        logger.info('페이지 로드 시 색인이 진행 중입니다. 모니터링을 시작합니다.')\r\n        startIndexingMonitoring()\r\n      }\r\n      \r\n      setIsLoading(false)\r\n    }\r\n\r\n    loadInitialData()\r\n  }, [fetchEnvironments, fetchDeploymentHistory])\r\n\r\n  // 색인 실행 (개발환경만)\r\n  const handleReindex = async (environment: Environment, description?: string) => {\r\n    if (environment.environmentType !== 'DEV') return\r\n    \r\n    setIsIndexing(true)\r\n    try {\r\n      const response = await deploymentService.executeIndexing({ description })\r\n      if (response.success) {\r\n        logger.info('색인 시작', { message: response.message })\r\n        toast({\r\n          title: \"색인 시작\",\r\n          description: \"색인이 시작되었습니다. 진행 상황을 모니터링합니다.\",\r\n          variant: \"default\"\r\n        })\r\n        // 즉시 환경 상태 새로고침 후 모니터링 시작\r\n        await fetchEnvironments()\r\n        startIndexingMonitoring()\r\n      } else {\r\n        logger.error('색인 실패', new Error(response.message))\r\n        toast({\r\n          title: \"색인 실패\",\r\n          description: response.message,\r\n          variant: \"destructive\"\r\n        })\r\n        setIsIndexing(false)\r\n      }\r\n    } catch (error) {\r\n      logger.error('색인 요청 실패', error as Error)\r\n      toast({\r\n          title: \"네트워크 오류\",\r\n          description: \"색인 요청 중 오류가 발생했습니다. 다시 시도해주세요.\",\r\n          variant: \"destructive\"\r\n        })\r\n      setIsIndexing(false)\r\n    }\r\n  }\r\n\r\n  // 배포 실행\r\n  const handleDeploy = async (description?: string) => {\r\n    setIsDeploying(true)\r\n    try {\r\n      const response = await deploymentService.executeDeploy({ description })\r\n      if (response.success) {\r\n        logger.info('배포 완료', { message: response.message })\r\n        toast({\r\n          title: \"배포 완료\",\r\n          description: `운영 환경으로 배포가 완료되었습니다. (버전: ${response.version})`,\r\n          variant: \"default\"\r\n        })\r\n        // 환경 정보 및 이력 새로고침\r\n        await Promise.all([\r\n          fetchEnvironments(),\r\n          fetchDeploymentHistory()\r\n        ])\r\n      } else {\r\n        logger.error('배포 실패', new Error(response.message))\r\n        toast({\r\n          title: \"배포 실패\",\r\n          description: response.message,\r\n          variant: \"destructive\"\r\n        })\r\n      }\r\n    } catch (error) {\r\n      logger.error('배포 요청 실패', error as Error)\r\n      toast({\r\n        title: \"배포 요청 실패\",\r\n        description: \"네트워크 오류가 발생했습니다. 다시 시도해주세요.\",\r\n        variant: \"destructive\"\r\n      })\r\n    } finally {\r\n      setIsDeploying(false)\r\n    }\r\n  }\r\n\r\n  // 색인 진행 상황 모니터링 - 백엔드 상태 우선\r\n  const startIndexingMonitoring = useCallback(() => {\r\n    let wasIndexing = false // 실제로 색인이 진행 중이었는지 추적\r\n    \r\n    const checkStatus = async () => {\r\n      try {\r\n        const response = await deploymentService.getEnvironments()\r\n        const devEnv = response.environments.find(env => env.environmentType === 'DEV')\r\n        \r\n        // 즉시 상태 업데이트\r\n        setEnvironments(response.environments)\r\n        \r\n        // 진행률 로그 (디버깅용)\r\n        if (devEnv?.indexingProgress !== null && devEnv?.indexingProgress !== undefined) {\r\n          logger.debug('색인 진행률', { \r\n            progress: devEnv.indexingProgress,\r\n            indexed: devEnv.indexedDocumentCount,\r\n            total: devEnv.totalDocumentCount,\r\n            status: devEnv.indexStatus,\r\n            isIndexing: devEnv.isIndexing\r\n          })\r\n        }\r\n        \r\n        // 백엔드 상태 기준으로 판단\r\n        const backendIndexing = !!(devEnv?.indexStatus === 'IN_PROGRESS' || devEnv?.isIndexing)\r\n        setIsIndexing(backendIndexing)\r\n        \r\n        logger.debug('색인 상태 체크', {\r\n          wasIndexing,\r\n          backendIndexing,\r\n          indexStatus: devEnv?.indexStatus,\r\n          isIndexing: devEnv?.isIndexing\r\n        })\r\n        \r\n        // 색인이 진행 중이었다가 완료된 경우만 처리\r\n        if (backendIndexing) {\r\n          wasIndexing = true\r\n        }\r\n        \r\n        if (devEnv && wasIndexing && !backendIndexing) {\r\n          // 색인 완료 체크\r\n          const indexStatus = devEnv.indexStatus as 'COMPLETED' | 'IN_PROGRESS' | 'FAILED' | 'ACTIVE'\r\n          if (indexStatus === 'COMPLETED' || indexStatus === 'ACTIVE') {\r\n            // 색인 완료\r\n            await fetchDeploymentHistory()\r\n            logger.info('색인 완료 감지!', {\r\n              status: devEnv.indexStatus,\r\n              documentCount: devEnv.documentCount\r\n            })\r\n            toast({\r\n              title: \"색인 완료\",\r\n              description: `색인이 성공적으로 완료되었습니다. (${formatNumber(devEnv.documentCount)}개 문서)`,\r\n              variant: \"default\"\r\n            })\r\n            return true\r\n          }\r\n          \r\n          // 색인 실패 체크\r\n          if (indexStatus === 'FAILED') {\r\n            // 색인 실패\r\n            logger.error('색인 실패!')\r\n            toast({\r\n              title: \"색인 실패\",\r\n              description: \"색인이 실패했습니다. 다시 시도해주세요.\",\r\n              variant: \"destructive\"\r\n            })\r\n            return true\r\n          }\r\n        }\r\n        \r\n        return false\r\n      } catch (error) {\r\n        logger.error('상태 확인 실패', error as Error)\r\n        return true\r\n      }\r\n    }\r\n\r\n    const interval = setInterval(async () => {\r\n      const isCompleted = await checkStatus()\r\n      if (isCompleted) {\r\n        clearInterval(interval)\r\n        setIsIndexing(false)\r\n      }\r\n    }, 1000) // 1초마다 체크\r\n\r\n    // 5분 후 자동 중단\r\n    setTimeout(() => {\r\n      clearInterval(interval)\r\n      setIsIndexing(false)\r\n      logger.warn('색인 모니터링 시간 초과로 중단됨')\r\n    }, 300000)\r\n  }, [fetchDeploymentHistory])\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"p-5\">\r\n        <div className=\"max-w-7xl mx-auto\">\r\n          <div className=\"text-center py-10\">\r\n            <div className=\"text-gray-500\">로딩 중...</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"p-5 space-y-5\">\r\n      <div className=\"max-w-7xl mx-auto space-y-5\">\r\n        {/* 환경 개요 */}\r\n        <EnvironmentOverview \r\n          environments={environments}\r\n          onDeploy={handleDeploy}\r\n          onReindex={handleReindex}\r\n          isIndexing={isIndexing}\r\n          isDeploying={isDeploying}\r\n        />\r\n\r\n        {/* 색인/배포 이력 */}\r\n        <DeploymentHistory history={deployHistory} />\r\n      </div>\r\n    </div>\r\n  )\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\stopword\\components\\StopwordDictionaryHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\stopword\\components\\StopwordDictionaryTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\stopword\\constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\stopword\\hooks\\use-dictionary-stopword.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\stopword\\hooks\\use-stopword-actions.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'toast'. Either include it or remove the dependency array.","line":116,"column":6,"nodeType":"ArrayExpression","endLine":116,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [onRefetch, toast]","fix":{"range":[3908,3919],"text":"[onRefetch, toast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react'\r\nimport { apiFetch } from '@/lib/api'\r\nimport { useToast } from '@/components/ui/use-toast'\r\nimport type { DictionaryItem } from '@/types/dashboard'\r\n\r\ninterface UseStopwordActionsReturn {\r\n  addingItem: boolean\r\n  setAddingItem: (value: boolean) => void\r\n  newKeyword: string\r\n  setNewKeyword: (value: string) => void\r\n  editingKeyword: string\r\n  setEditingKeyword: (value: string) => void\r\n  highlightedId: number | null\r\n  error: string\r\n  setError: (value: string) => void\r\n  handleAdd: () => void\r\n  handleSaveNew: () => Promise<void>\r\n  handleCancelNew: () => void\r\n  handleEdit: (item: DictionaryItem, items: DictionaryItem[]) => DictionaryItem[]\r\n  handleSaveEdit: (item: DictionaryItem, items: DictionaryItem[]) => Promise<DictionaryItem[]>\r\n  handleCancelEdit: (item: DictionaryItem, items: DictionaryItem[]) => DictionaryItem[]\r\n  handleDelete: (id: number) => Promise<void>\r\n  validateKeyword: (keyword: string) => boolean\r\n}\r\n\r\nexport function useStopwordActions(onRefetch: () => void): UseStopwordActionsReturn {\r\n  const { toast } = useToast()\r\n  const [addingItem, setAddingItem] = useState(false)\r\n  const [newKeyword, setNewKeyword] = useState('')\r\n  const [editingKeyword, setEditingKeyword] = useState('')\r\n  const [highlightedId, setHighlightedId] = useState<number | null>(null)\r\n  const [error, setError] = useState('')\r\n\r\n  const validateKeyword = useCallback((keyword: string): boolean => {\r\n    const trimmed = keyword.trim()\r\n    return trimmed !== '' && !trimmed.includes(',') && !trimmed.includes('=')\r\n  }, [])\r\n\r\n  const handleAdd = useCallback(() => {\r\n    setAddingItem(true)\r\n    setNewKeyword('')\r\n  }, [])\r\n\r\n  const handleSaveNew = useCallback(async () => {\r\n    if (!validateKeyword(newKeyword)) {\r\n      setError('불용어는 단일 단어로 입력해주세요. (콤마나 특수문자 불가)')\r\n      return\r\n    }\r\n    \r\n    const response = await apiFetch<DictionaryItem>('/v1/dictionaries/stopword', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ keyword: newKeyword.trim() })\r\n    })\r\n    \r\n    setAddingItem(false)\r\n    setNewKeyword('')\r\n    setError('')\r\n    setHighlightedId(response.id)\r\n    setTimeout(() => setHighlightedId(null), 3000)\r\n    await onRefetch()\r\n  }, [newKeyword, validateKeyword, onRefetch])\r\n\r\n  const handleCancelNew = useCallback(() => {\r\n    setAddingItem(false)\r\n    setNewKeyword('')\r\n    setError('')\r\n  }, [])\r\n\r\n  const handleEdit = useCallback((item: DictionaryItem, items: DictionaryItem[]): DictionaryItem[] => {\r\n    setEditingKeyword(item.keyword)\r\n    return items.map(i => ({\r\n      ...i,\r\n      isEditing: i.id === item.id\r\n    }))\r\n  }, [])\r\n\r\n  const handleSaveEdit = useCallback(async (item: DictionaryItem, items: DictionaryItem[]): Promise<DictionaryItem[]> => {\r\n    if (!validateKeyword(editingKeyword)) {\r\n      setError('불용어는 단일 단어로 입력해주세요. (콤마나 특수문자 불가)')\r\n      throw new Error('Invalid keyword format')\r\n    }\r\n    \r\n    const response = await apiFetch<DictionaryItem>(`/v1/dictionaries/stopword/${item.id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify({ keyword: editingKeyword.trim() })\r\n    })\r\n    \r\n    setError('')\r\n    setHighlightedId(response.id)\r\n    setTimeout(() => setHighlightedId(null), 3000)\r\n    \r\n    return items.map(i => \r\n      i.id === item.id \r\n        ? { ...response, isEditing: false }\r\n        : i\r\n    )\r\n  }, [editingKeyword, validateKeyword])\r\n\r\n  const handleCancelEdit = useCallback((item: DictionaryItem, items: DictionaryItem[]): DictionaryItem[] => {\r\n    setError('')\r\n    return items.map(i => ({\r\n      ...i,\r\n      isEditing: false\r\n    }))\r\n  }, [])\r\n\r\n  const handleDelete = useCallback(async (id: number) => {\r\n    if (!confirm('정말로 삭제하시겠습니까?')) return\r\n    \r\n    await apiFetch(`/v1/dictionaries/stopword/${id}`, { method: 'DELETE' })\r\n    toast({\r\n      title: \"삭제 완료\",\r\n      description: \"사전 항목이 성공적으로 삭제되었습니다.\"\r\n    })\r\n    await onRefetch()\r\n  }, [onRefetch])\r\n\r\n  return {\r\n    addingItem,\r\n    setAddingItem,\r\n    newKeyword,\r\n    setNewKeyword,\r\n    editingKeyword,\r\n    setEditingKeyword,\r\n    highlightedId,\r\n    error,\r\n    setError,\r\n    handleAdd,\r\n    handleSaveNew,\r\n    handleCancelNew,\r\n    handleEdit,\r\n    handleSaveEdit,\r\n    handleCancelEdit,\r\n    handleDelete,\r\n    validateKeyword\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\stopword\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\synonym\\components\\SynonymDictionaryForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\synonym\\components\\SynonymDictionaryHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\synonym\\components\\SynonymDictionaryTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\synonym\\constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\synonym\\hooks\\use-dictionary-synonym.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\synonym\\hooks\\use-synonym-actions.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'toast'. Either include it or remove the dependency array.","line":131,"column":6,"nodeType":"ArrayExpression","endLine":131,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [onRefetch, toast]","fix":{"range":[4547,4558],"text":"[onRefetch, toast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react'\r\nimport { apiFetch } from '@/lib/api'\r\nimport { synonymDictionaryService } from '@/services'\r\nimport { useToast } from '@/components/ui/use-toast'\r\nimport type { DictionaryItem, DictionaryEnvironmentType } from '@/types/dashboard'\r\n\r\ninterface UseSynonymActionsReturn {\r\n  addingItem: boolean\r\n  setAddingItem: (value: boolean) => void\r\n  newKeyword: string\r\n  setNewKeyword: (value: string) => void\r\n  editingKeyword: string\r\n  setEditingKeyword: (value: string) => void\r\n  highlightedId: number | null\r\n  error: string\r\n  setError: (value: string) => void\r\n  handleAdd: () => void\r\n  handleSaveNew: () => Promise<void>\r\n  handleCancelNew: () => void\r\n  handleEdit: (item: DictionaryItem, items: DictionaryItem[]) => DictionaryItem[]\r\n  handleSaveEdit: (item: DictionaryItem, items: DictionaryItem[]) => Promise<DictionaryItem[]>\r\n  handleCancelEdit: (item: DictionaryItem, items: DictionaryItem[]) => DictionaryItem[]\r\n  handleDelete: (id: number) => Promise<void>\r\n  handleApplyChanges: (environment: DictionaryEnvironmentType) => Promise<void>\r\n  validateKeyword: (keyword: string) => boolean\r\n}\r\n\r\nexport function useSynonymActions(onRefetch: () => Promise<void>): UseSynonymActionsReturn {\r\n  const { toast } = useToast()\r\n  const [addingItem, setAddingItem] = useState(false)\r\n  const [newKeyword, setNewKeyword] = useState('')\r\n  const [editingKeyword, setEditingKeyword] = useState('')\r\n  const [highlightedId, setHighlightedId] = useState<number | null>(null)\r\n  const [error, setError] = useState('')\r\n\r\n  const validateKeyword = useCallback((keyword: string): boolean => {\r\n    const trimmed = keyword.trim()\r\n    if (trimmed === '') return false\r\n    \r\n    const hasArrow = trimmed.includes('=>')\r\n    const hasComma = trimmed.includes(',') && !hasArrow\r\n    \r\n    return hasArrow || hasComma\r\n  }, [])\r\n\r\n  const handleAdd = useCallback(() => {\r\n    setAddingItem(true)\r\n    setNewKeyword('')\r\n  }, [])\r\n\r\n  const handleApplyChanges = useCallback(async (environment: DictionaryEnvironmentType) => {\r\n    const response = await synonymDictionaryService.realtimeSync(environment)\r\n    toast({\r\n      title: \"실시간 반영 완료\",\r\n      description: response.message || '동의어 사전이 실시간으로 반영되었습니다.'\r\n    })\r\n  }, [toast])\r\n\r\n  const handleSaveNew = useCallback(async () => {\r\n    if (!validateKeyword(newKeyword)) {\r\n      setError('올바른 형식으로 입력해주세요.\\n단방향: 휴대폰 => 핸드폰,모바일,스마트폰\\n양방향: 휴대폰,핸드폰,모바일,스마트폰')\r\n      return\r\n    }\r\n    \r\n    const response = await apiFetch<DictionaryItem>('/v1/dictionaries/synonym', {\r\n      method: 'POST',\r\n      body: JSON.stringify({ keyword: newKeyword.trim() })\r\n    })\r\n    \r\n    setAddingItem(false)\r\n    setNewKeyword('')\r\n    setError('')\r\n    setHighlightedId(response.id)\r\n    setTimeout(() => setHighlightedId(null), 3000)\r\n    await onRefetch()\r\n  }, [newKeyword, validateKeyword, onRefetch])\r\n\r\n  const handleCancelNew = useCallback(() => {\r\n    setAddingItem(false)\r\n    setNewKeyword('')\r\n    setError('')\r\n  }, [])\r\n\r\n  const handleEdit = useCallback((item: DictionaryItem, items: DictionaryItem[]): DictionaryItem[] => {\r\n    setEditingKeyword(item.keyword)\r\n    return items.map(i => ({\r\n      ...i,\r\n      isEditing: i.id === item.id\r\n    }))\r\n  }, [])\r\n\r\n  const handleSaveEdit = useCallback(async (item: DictionaryItem, items: DictionaryItem[]): Promise<DictionaryItem[]> => {\r\n    if (!validateKeyword(editingKeyword)) {\r\n      setError('올바른 형식으로 입력해주세요.\\n단방향: 휴대폰 => 핸드폰,모바일,스마트폰\\n양방향: 휴대폰,핸드폰,모바일,스마트폰')\r\n      throw new Error('Invalid keyword format')\r\n    }\r\n    \r\n    const response = await apiFetch<DictionaryItem>(`/v1/dictionaries/synonym/${item.id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify({ keyword: editingKeyword.trim() })\r\n    })\r\n    \r\n    setError('')\r\n    setHighlightedId(response.id)\r\n    setTimeout(() => setHighlightedId(null), 3000)\r\n    \r\n    return items.map(i => \r\n      i.id === item.id \r\n        ? { ...response, isEditing: false }\r\n        : i\r\n    )\r\n  }, [editingKeyword, validateKeyword])\r\n\r\n  const handleCancelEdit = useCallback((item: DictionaryItem, items: DictionaryItem[]): DictionaryItem[] => {\r\n    setError('')\r\n    return items.map(i => ({\r\n      ...i,\r\n      isEditing: false\r\n    }))\r\n  }, [])\r\n\r\n  const handleDelete = useCallback(async (id: number) => {\r\n    if (!confirm('정말로 삭제하시겠습니까?')) return\r\n    \r\n    await apiFetch(`/v1/dictionaries/synonym/${id}`, { method: 'DELETE' })\r\n    toast({\r\n      title: \"삭제 완료\",\r\n      description: \"사전 항목이 성공적으로 삭제되었습니다.\"\r\n    })\r\n    await onRefetch()\r\n  }, [onRefetch])\r\n\r\n  return {\r\n    addingItem,\r\n    setAddingItem,\r\n    newKeyword,\r\n    setNewKeyword,\r\n    editingKeyword,\r\n    setEditingKeyword,\r\n    highlightedId,\r\n    error,\r\n    setError,\r\n    handleAdd,\r\n    handleSaveNew,\r\n    handleCancelNew,\r\n    handleEdit,\r\n    handleSaveEdit,\r\n    handleCancelEdit,\r\n    handleDelete,\r\n    handleApplyChanges,\r\n    validateKeyword\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\synonym\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\typo\\components\\TypoCorrectionDictionaryHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\typo\\components\\TypoCorrectionDictionaryTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\typo\\constants.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\typo\\hooks\\use-dictionary-typo.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\typo\\hooks\\use-typo-actions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":91,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":91,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3826,3829],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3826,3829],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'toast'. Either include it or remove the dependency array.","line":138,"column":6,"nodeType":"ArrayExpression","endLine":138,"endColumn":17,"suggestions":[{"desc":"Update the dependencies array to be: [onRefetch, toast]","fix":{"range":[5418,5429],"text":"[onRefetch, toast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react'\r\nimport { typoCorrectionDictionaryApi } from '@/lib/api'\r\nimport { typoCorrectionDictionaryService } from '@/services'\r\nimport { useToast } from '@/components/ui/use-toast'\r\nimport type { DictionaryEnvironmentType } from '@/types/dashboard'\r\nimport type { TypoCorrectionDictionaryItem } from '@/services/dictionary/types'\r\n\r\ninterface UseTypoActionsReturn {\r\n  addingItem: boolean\r\n  setAddingItem: (value: boolean) => void\r\n  newKeyword: string\r\n  setNewKeyword: (value: string) => void\r\n  newCorrectedWord: string\r\n  setNewCorrectedWord: (value: string) => void\r\n  editingKeyword: string\r\n  setEditingKeyword: (value: string) => void\r\n  editingCorrectedWord: string\r\n  setEditingCorrectedWord: (value: string) => void\r\n  highlightedId: number | null\r\n  error: string\r\n  setError: (value: string) => void\r\n  handleAdd: () => void\r\n  handleSaveNew: () => Promise<void>\r\n  handleCancelNew: () => void\r\n  handleEdit: (item: TypoCorrectionDictionaryItem, items: TypoCorrectionDictionaryItem[]) => TypoCorrectionDictionaryItem[]\r\n  handleSaveEdit: (item: TypoCorrectionDictionaryItem, items: TypoCorrectionDictionaryItem[]) => Promise<TypoCorrectionDictionaryItem[]>\r\n  handleCancelEdit: (item: TypoCorrectionDictionaryItem, items: TypoCorrectionDictionaryItem[]) => TypoCorrectionDictionaryItem[]\r\n  handleDelete: (id: number) => Promise<void>\r\n  handleApplyChanges: (environment: DictionaryEnvironmentType) => Promise<void>\r\n  validateTypoCorrection: (keyword: string, correctedWord: string) => boolean\r\n}\r\n\r\nexport function useTypoActions(onRefetch: () => Promise<void>): UseTypoActionsReturn {\r\n  const { toast } = useToast()\r\n  const [addingItem, setAddingItem] = useState(false)\r\n  const [newKeyword, setNewKeyword] = useState('')\r\n  const [newCorrectedWord, setNewCorrectedWord] = useState('')\r\n  const [editingKeyword, setEditingKeyword] = useState('')\r\n  const [editingCorrectedWord, setEditingCorrectedWord] = useState('')\r\n  const [highlightedId, setHighlightedId] = useState<number | null>(null)\r\n  const [error, setError] = useState('')\r\n\r\n  const validateTypoCorrection = useCallback((keyword: string, correctedWord: string): boolean => {\r\n    return keyword.trim() !== '' && correctedWord.trim() !== ''\r\n  }, [])\r\n\r\n  const handleAdd = useCallback(() => {\r\n    setAddingItem(true)\r\n    setNewKeyword('')\r\n    setNewCorrectedWord('')\r\n  }, [])\r\n\r\n  const handleApplyChanges = useCallback(async (environment: DictionaryEnvironmentType) => {\r\n    const response = await typoCorrectionDictionaryService.realtimeSync(environment)\r\n    toast({\r\n      title: \"실시간 반영 완료\",\r\n      description: response.message || '오타교정 사전이 실시간으로 반영되었습니다.'\r\n    })\r\n  }, [toast])\r\n\r\n  const handleSaveNew = useCallback(async () => {\r\n    if (!validateTypoCorrection(newKeyword, newCorrectedWord)) {\r\n      setError('오타 단어와 교정어를 모두 입력해주세요.')\r\n      return\r\n    }\r\n    \r\n    const response = await typoCorrectionDictionaryApi.create({ \r\n      typoWord: newKeyword.trim(),\r\n      correctWord: newCorrectedWord.trim(),\r\n      // keyword: `${newKeyword.trim()} => ${newCorrectedWord.trim()}` // 하위 호환 필요 시\r\n    })\r\n    \r\n    setAddingItem(false)\r\n    setNewKeyword('')\r\n    setNewCorrectedWord('')\r\n    setError('')\r\n    setHighlightedId(response.id)\r\n    setTimeout(() => setHighlightedId(null), 3000)\r\n    await onRefetch()\r\n  }, [newKeyword, newCorrectedWord, validateTypoCorrection, onRefetch])\r\n\r\n  const handleCancelNew = useCallback(() => {\r\n    setAddingItem(false)\r\n    setNewKeyword('')\r\n    setNewCorrectedWord('')\r\n    setError('')\r\n  }, [])\r\n\r\n  const handleEdit = useCallback((item: TypoCorrectionDictionaryItem, items: TypoCorrectionDictionaryItem[]): TypoCorrectionDictionaryItem[] => {\r\n    setEditingKeyword(item.keyword)\r\n    setEditingCorrectedWord(item.correctedWord || (item as any).correctWord || '')\r\n    return items.map(i => ({\r\n      ...i,\r\n      isEditing: i.id === item.id\r\n    }))\r\n  }, [])\r\n\r\n  const handleSaveEdit = useCallback(async (item: TypoCorrectionDictionaryItem, items: TypoCorrectionDictionaryItem[]): Promise<TypoCorrectionDictionaryItem[]> => {\r\n    if (!validateTypoCorrection(editingKeyword, editingCorrectedWord)) {\r\n      setError('오타 단어와 교정어를 모두 입력해주세요.')\r\n      throw new Error('Invalid typo correction format')\r\n    }\r\n    \r\n    const response = await typoCorrectionDictionaryApi.update(item.id, { \r\n      typoWord: editingKeyword.trim(),\r\n      correctWord: editingCorrectedWord.trim(),\r\n      // keyword: `${editingKeyword.trim()} => ${editingCorrectedWord.trim()}` // 하위 호환 필요 시\r\n    })\r\n    \r\n    setError('')\r\n    setHighlightedId(response.id)\r\n    setTimeout(() => setHighlightedId(null), 3000)\r\n    \r\n    return items.map(i => \r\n      i.id === item.id \r\n        ? response\r\n        : i\r\n    ) as TypoCorrectionDictionaryItem[]\r\n  }, [editingKeyword, editingCorrectedWord, validateTypoCorrection])\r\n\r\n  const handleCancelEdit = useCallback((item: TypoCorrectionDictionaryItem, items: TypoCorrectionDictionaryItem[]): TypoCorrectionDictionaryItem[] => {\r\n    setError('')\r\n    return items.map(i => ({\r\n      ...i,\r\n      isEditing: false\r\n    }))\r\n  }, [])\r\n\r\n  const handleDelete = useCallback(async (id: number) => {\r\n    if (!confirm('정말로 삭제하시겠습니까?')) return\r\n    \r\n    await typoCorrectionDictionaryApi.delete(id)\r\n    toast({\r\n      title: \"삭제 완료\",\r\n      description: \"사전 항목이 성공적으로 삭제되었습니다.\"\r\n    })\r\n    await onRefetch()\r\n  }, [onRefetch])\r\n\r\n  return {\r\n    addingItem,\r\n    setAddingItem,\r\n    newKeyword,\r\n    setNewKeyword,\r\n    newCorrectedWord,\r\n    setNewCorrectedWord,\r\n    editingKeyword,\r\n    setEditingKeyword,\r\n    editingCorrectedWord,\r\n    setEditingCorrectedWord,\r\n    highlightedId,\r\n    error,\r\n    setError,\r\n    handleAdd,\r\n    handleSaveNew,\r\n    handleCancelNew,\r\n    handleEdit,\r\n    handleSaveEdit,\r\n    handleCancelEdit,\r\n    handleDelete,\r\n    handleApplyChanges,\r\n    validateTypoCorrection\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\typo\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\user\\components\\EnvironmentSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\user\\components\\UserDictionaryForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\user\\components\\UserDictionaryHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\user\\components\\UserDictionaryTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\user\\hooks\\use-dictionary-actions.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'toast'. Either include it or remove the dependency array.","line":103,"column":6,"nodeType":"ArrayExpression","endLine":103,"endColumn":15,"suggestions":[{"desc":"Update the dependencies array to be: [refetch, toast]","fix":{"range":[2981,2990],"text":"[refetch, toast]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react'\r\nimport { apiFetch } from '@/lib/api'\r\nimport { useToast } from '@/components/ui/use-toast'\r\nimport type { DictionaryItem } from '@/types/dashboard'\r\n\r\ninterface UseDictionaryActionsParams {\r\n  refetch: () => Promise<void>\r\n}\r\n\r\nexport function useDictionaryActions({ refetch }: UseDictionaryActionsParams) {\r\n  const { toast } = useToast()\r\n  const [addingItem, setAddingItem] = useState(false)\r\n  const [newKeyword, setNewKeyword] = useState('')\r\n  const [editingId, setEditingId] = useState<number | null>(null)\r\n  const [editingKeyword, setEditingKeyword] = useState('')\r\n  const [highlightedId, setHighlightedId] = useState<number | null>(null)\r\n\r\n  const setHighlight = useCallback((id: number) => {\r\n    setHighlightedId(id)\r\n    setTimeout(() => setHighlightedId(null), 3000)\r\n  }, [])\r\n\r\n  const validateKeyword = useCallback((keyword: string): boolean => {\r\n    return keyword.trim() !== ''\r\n  }, [])\r\n\r\n  const handleAdd = useCallback(() => {\r\n    setAddingItem(true)\r\n    setNewKeyword('')\r\n  }, [])\r\n\r\n  const handleSaveNew = useCallback(async () => {\r\n    if (!validateKeyword(newKeyword)) {\r\n      throw new Error('키워드를 입력해주세요.')\r\n    }\r\n\r\n    const response = await apiFetch<DictionaryItem>('/v1/dictionaries/user', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        keyword: newKeyword.trim(),\r\n      }),\r\n    })\r\n\r\n    setAddingItem(false)\r\n    setNewKeyword('')\r\n    setHighlight(response.id)\r\n    await refetch()\r\n  }, [newKeyword, refetch, setHighlight, validateKeyword])\r\n\r\n  const handleCancelNew = useCallback(() => {\r\n    setAddingItem(false)\r\n    setNewKeyword('')\r\n  }, [])\r\n\r\n  const handleEdit = useCallback((item: DictionaryItem) => {\r\n    setEditingId(item.id)\r\n    setEditingKeyword(item.keyword)\r\n  }, [])\r\n\r\n  const handleSaveEdit = useCallback(async (item: DictionaryItem) => {\r\n    if (!validateKeyword(editingKeyword)) {\r\n      throw new Error('키워드를 입력해주세요.')\r\n    }\r\n\r\n    const response = await apiFetch<DictionaryItem>(\r\n      `/v1/dictionaries/user/${item.id}`,\r\n      {\r\n        method: 'PUT',\r\n        body: JSON.stringify({\r\n          keyword: editingKeyword.trim(),\r\n        }),\r\n      }\r\n    )\r\n\r\n    setEditingId(null)\r\n    setEditingKeyword('')\r\n    setHighlight(response.id)\r\n    await refetch()\r\n  }, [editingKeyword, refetch, setHighlight, validateKeyword])\r\n\r\n  const handleCancelEdit = useCallback(() => {\r\n    setEditingId(null)\r\n    setEditingKeyword('')\r\n  }, [])\r\n\r\n  const handleDelete = useCallback(async (id: number) => {\r\n    if (!confirm('정말로 삭제하시겠습니까?')) return\r\n\r\n    try {\r\n      await apiFetch(`/v1/dictionaries/user/${id}`, { method: 'DELETE' })\r\n      toast({\r\n        title: \"삭제 완료\",\r\n        description: \"사전 항목이 성공적으로 삭제되었습니다.\"\r\n      })\r\n      await refetch()\r\n    } catch (err) {\r\n      toast({\r\n        title: \"삭제 실패\",\r\n        description: err instanceof Error ? err.message : \"삭제에 실패했습니다.\",\r\n        variant: \"destructive\"\r\n      })\r\n    }\r\n  }, [refetch])\r\n\r\n  return {\r\n    addingItem,\r\n    newKeyword,\r\n    editingId,\r\n    editingKeyword,\r\n    highlightedId,\r\n    setNewKeyword,\r\n    setEditingKeyword,\r\n    handleAdd,\r\n    handleSaveNew,\r\n    handleCancelNew,\r\n    handleEdit,\r\n    handleSaveEdit,\r\n    handleCancelEdit,\r\n    handleDelete,\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\user\\hooks\\use-dictionary-user.ts","messages":[],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchItems'. Either include it or remove the dependency array.","line":78,"column":6,"nodeType":"ArrayExpression","endLine":78,"endColumn":59,"suggestions":[{"desc":"Update the dependencies array to be: [page, sortField, sortDirection, environment, search, fetchItems]","fix":{"range":[2030,2083],"text":"[page, sortField, sortDirection, environment, search, fetchItems]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\dictionary\\user\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-demo\\components\\PopularKeywords.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-demo\\components\\ProductFilters.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-demo\\components\\ProductList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-demo\\components\\SearchHeader.tsx","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'setQuery'. Either include it or remove the dependency array. If 'setQuery' changes too often, find the parent component that defines it and wrap that definition in useCallback.","line":116,"column":6,"nodeType":"ArrayExpression","endLine":116,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [selectedIndex, setQuery, suggestions]","fix":{"range":[3780,3808],"text":"[selectedIndex, setQuery, suggestions]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Search } from \"lucide-react\";\r\nimport { searchApi } from \"@/lib/api\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { logger } from \"@/lib/logger\";\r\n\r\ninterface SearchHeaderProps {\r\n  query: string;\r\n  setQuery: (query: string) => void;\r\n  onSearch: (query: string) => void;\r\n  relatedKeywords: string[];\r\n  // 오타교정 기능은 백엔드에서 미지원\r\n  // applyTypoCorrection?: boolean;\r\n  // setApplyTypoCorrection?: (apply: boolean) => void;\r\n}\r\n\r\nfunction highlight(text: string, keyword: string) {\r\n  if (!keyword) return text;\r\n  \r\n  // 공백으로 키워드를 분리하고 빈 문자열 제거\r\n  const keywords = keyword.trim().split(/\\s+/).filter(k => k.length > 0);\r\n  if (keywords.length === 0) return text;\r\n  \r\n  // 각 키워드를 이스케이프하고 합침\r\n  const escapedKeywords = keywords.map(k => k.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"));\r\n  const regex = new RegExp(`(${escapedKeywords.join('|')})`, \"gi\");\r\n  \r\n  const parts = text.split(regex);\r\n  return parts.map((part, i) =>\r\n    regex.test(part)\r\n      ? <span key={i} style={{ color: '#2563eb', fontWeight: 600 }}>{part}</span>\r\n      : part\r\n  );\r\n}\r\n\r\nexport function SearchHeader({ query, setQuery, onSearch, relatedKeywords: _relatedKeywords }: SearchHeaderProps) {\r\n  const [suggestions, setSuggestions] = React.useState<string[]>([]);\r\n  const [showSuggest, setShowSuggest] = React.useState(false);\r\n  const [selectedIndex, setSelectedIndex] = React.useState(-1);\r\n  const [originalQuery, setOriginalQuery] = React.useState(\"\"); // 사용자가 입력한 원본 쿼리 저장\r\n  const [isNavigating, setIsNavigating] = React.useState(false); // 키보드 네비게이션 중인지 추적\r\n\r\n  // 자동완성 처리 (키보드 네비게이션 중이 아닐 때만)\r\n  React.useEffect(() => {\r\n    if (isNavigating) return; // 키보드 네비게이션 중이면 자동완성 갱신 안함\r\n\r\n    const timeoutId = setTimeout(async () => {\r\n      try {\r\n        const response = await searchApi.getAutocomplete(query);\r\n        setSuggestions(response.suggestions);\r\n        setSelectedIndex(-1); // 새로운 자동완성 시 선택 초기화\r\n        setOriginalQuery(query); // 원본 쿼리 저장\r\n      } catch (error) {\r\n        logger.error('자동완성 오류', error as Error);\r\n        setSuggestions([]);\r\n      }\r\n    }, 200); // 200ms 디바운싱\r\n\r\n    return () => clearTimeout(timeoutId);\r\n  }, [query, isNavigating]);\r\n\r\n  // 키보드 이벤트 핸들러\r\n  const handleKeyDown = (e: React.KeyboardEvent) => {\r\n    if (!showSuggest || suggestions.length === 0) {\r\n      if (e.key === 'Enter') {\r\n        onSearch(query);\r\n      }\r\n      return;\r\n    }\r\n\r\n    switch (e.key) {\r\n      case 'ArrowDown':\r\n        e.preventDefault();\r\n        setIsNavigating(true);\r\n        setSelectedIndex(prev => \r\n          prev < suggestions.length - 1 ? prev + 1 : 0\r\n        );\r\n        break;\r\n      case 'ArrowUp':\r\n        e.preventDefault();\r\n        setIsNavigating(true);\r\n        setSelectedIndex(prev => \r\n          prev > 0 ? prev - 1 : suggestions.length - 1\r\n        );\r\n        break;\r\n      case 'Enter':\r\n        e.preventDefault();\r\n        setIsNavigating(false);\r\n        if (selectedIndex >= 0) {\r\n          const selectedSuggestion = suggestions[selectedIndex];\r\n          setQuery(selectedSuggestion);\r\n          onSearch(selectedSuggestion);\r\n          setShowSuggest(false);\r\n        } else {\r\n          onSearch(query);\r\n          setShowSuggest(false);\r\n        }\r\n        break;\r\n      case 'Escape':\r\n        setShowSuggest(false);\r\n        setSelectedIndex(-1);\r\n        setIsNavigating(false);\r\n        setQuery(originalQuery); // 원본 쿼리로 복원\r\n        break;\r\n    }\r\n  };\r\n\r\n  // 선택된 인덱스가 변경될 때 검색창에 값 업데이트 (자동완성 갱신 방지)\r\n  React.useEffect(() => {\r\n    if (selectedIndex >= 0 && suggestions[selectedIndex]) {\r\n      // 키보드 네비게이션 시에는 자동완성을 갱신하지 않음\r\n      setQuery(suggestions[selectedIndex]);\r\n    }\r\n  }, [selectedIndex, suggestions]);\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const value = e.target.value;\r\n    setQuery(value);\r\n    setOriginalQuery(value); // 사용자 입력 시 원본 쿼리 업데이트\r\n    setShowSuggest(true);\r\n    setSelectedIndex(-1); // 입력 시 선택 초기화\r\n    setIsNavigating(false); // 직접 입력시 네비게이션 모드 해제\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {/* 상단: 관리도구 링크 */}\r\n      <div className=\"w-full\">\r\n        <div className=\"flex items-center px-2 py-2 justify-end\">\r\n          <Link to=\"/dashboard\" className=\"text-xs text-gray-400 hover:underline font-medium\">관리도구</Link>\r\n        </div>\r\n        <div className=\"w-full h-px bg-gray-200 mb-2\" />\r\n      </div>\r\n      \r\n      {/* 검색창 영역 */}\r\n      <div className=\"w-full flex flex-col mb-2\">\r\n        <div className=\"relative flex items-center h-[64px]\">\r\n          <div className=\"flex items-center min-w-[160px] h-[64px] bg-transparent justify-start\">\r\n            {/* 로고 */}\r\n            <svg width=\"120\" height=\"40\" viewBox=\"0 0 120 40\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n              <circle cx=\"24\" cy=\"20\" r=\"16\" fill=\"#2563eb\"/>\r\n              <g>\r\n                <circle cx=\"24\" cy=\"20\" r=\"8\" fill=\"#fff\"/>\r\n                <circle cx=\"27.5\" cy=\"23.5\" r=\"3.5\" fill=\"#2563eb\"/>\r\n                <rect x=\"31\" y=\"27\" width=\"6\" height=\"2\" rx=\"1\" transform=\"rotate(45 31 27)\" fill=\"#2563eb\"/>\r\n              </g>\r\n              <text x=\"44\" y=\"27\" fontSize=\"20\" fontFamily=\"sans-serif\" fill=\"#222\" fontWeight=\"bold\">Search</text>\r\n            </svg>\r\n          </div>\r\n          \r\n          <div className=\"flex-1 flex justify-center absolute left-0 right-0\">\r\n            <div className=\"flex flex-col gap-0 w-[480px]\">\r\n              <div className=\"relative flex items-center bg-white rounded-full shadow-xl border-2 border-blue-300 px-4 py-2 focus-within:ring-2 focus-within:ring-blue-400\" style={{minHeight:'44px', maxHeight:'48px'}}>\r\n                <Input\r\n                  value={query}\r\n                  onChange={handleInputChange}\r\n                  onFocus={() => setShowSuggest(true)}\r\n                  onBlur={() => setTimeout(() => setShowSuggest(false), 150)}\r\n                  placeholder=\"검색어를 입력하세요\"\r\n                  className=\"flex-1 bg-transparent outline-none text-base px-2 py-1 text-gray-800 placeholder-gray-400 border-0 shadow-none focus:placeholder-blue-400\"\r\n                  autoComplete=\"off\"\r\n                  onKeyDown={handleKeyDown}\r\n                />\r\n                <Button \r\n                  className=\"ml-2 px-3 py-2 rounded-full text-lg font-bold bg-blue-500 hover:bg-blue-600 text-white shadow-md flex items-center justify-center\" \r\n                  style={{minWidth:'40px', minHeight:'40px'}} \r\n                  onClick={() => { \r\n                    onSearch(query); \r\n                    setShowSuggest(false);\r\n                  }}\r\n                >\r\n                  <Search />\r\n                </Button>\r\n                \r\n                {/* 자동완성 드롭다운 */}\r\n                {showSuggest && suggestions.length > 0 && (\r\n                  <ul className=\"absolute inset-x-0 top-full mt-1 z-20 w-full bg-white border border-gray-200 rounded-lg shadow max-h-64 overflow-auto\">\r\n                    {suggestions.map((s, i) => (\r\n                      <li\r\n                        key={s + i}\r\n                        className={`px-4 py-2 cursor-pointer text-xs leading-tight truncate ${\r\n                          i === selectedIndex \r\n                            ? 'bg-blue-100 text-blue-700' \r\n                            : 'hover:bg-blue-50'\r\n                        }`}\r\n                        onMouseDown={() => { onSearch(s); setQuery(s); setShowSuggest(false); }}\r\n                      >\r\n                        {highlight(s, originalQuery)}\r\n                      </li>\r\n                    ))}\r\n                  </ul>\r\n                )}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* 오타교정 옵션 제거 - 백엔드 미지원 */}\r\n        \r\n        {/* 연관검색어 */}\r\n        {/* <div className=\"w-full px-6 py-2 flex items-center gap-2 text-xs bg-transparent justify-center\">\r\n          <span className=\"font-bold text-gray-600 mr-2\">연관검색어</span>\r\n          <span className=\"text-gray-200\">|</span>\r\n          <div className=\"flex flex-wrap gap-2\">\r\n            {relatedKeywords.map((k) => (\r\n              <span \r\n                key={k} \r\n                className=\"text-black hover:underline cursor-pointer text-xs transition-colors\"\r\n                onClick={() => onSearch(k)}\r\n              >\r\n                {k}\r\n              </span>\r\n            ))}\r\n          </div>\r\n        </div> */}\r\n      </div>\r\n    </>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-demo\\components\\TrendingKeywords.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-demo\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8460,8463],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8460,8463],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":78,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":81,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8468,8471],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8468,8471],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":238,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":238,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8659,8662],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8659,8662],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8720,8723],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8720,8723],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":243,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":243,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8856,8859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8856,8859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":245,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8941,8944],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8941,8944],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":247,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":247,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9032,9035],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9032,9035],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9088,9091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9088,9091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9144,9147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9144,9147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9305,9308],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9305,9308],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":253,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":253,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9313,9316],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9313,9316],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":262,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":262,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9685,9688],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9685,9688],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook React.useEffect has a missing dependency: 'searchQuery'. Either include it or remove the dependency array.","line":292,"column":6,"nodeType":"ArrayExpression","endLine":292,"endColumn":69,"suggestions":[{"desc":"Update the dependencies array to be: [brand, category, categorySub, page, sort, performFilterSearch, searchQuery]","fix":{"range":[10520,10583],"text":"[brand, category, categorySub, page, sort, performFilterSearch, searchQuery]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import * as React from \"react\";\r\nimport { dashboardApi, enhancedSearchApi, type Product, type AggregationBucket } from \"@/lib/api\";\r\n// import { type KeywordItem } from \"@/types/dashboard\";\r\n// import { logger } from \"@/lib/logger\";\r\nimport { SearchHeader } from \"./components/SearchHeader\";\r\nimport { PopularKeywords } from \"./components/PopularKeywords\";\r\nimport { TrendingKeywords } from \"./components/TrendingKeywords\";\r\nimport { ProductFilters } from \"./components/ProductFilters\";\r\nimport { ProductList } from \"./components/ProductList\";\r\n\r\nexport default function SearchDemo() {\r\n  // 검색/필터 상태\r\n  const [query, setQuery] = React.useState(\"노트북\"); // 입력창 값\r\n  const [searchQuery, setSearchQuery] = React.useState(\"노트북\"); // 실제 검색 실행 값\r\n  const [brand, setBrand] = React.useState<string[]>([]);\r\n  const [category, setCategory] = React.useState<string[]>([]);\r\n  const [price, setPrice] = React.useState<{ from: string; to: string }>({ from: \"\", to: \"\" });\r\n  const [page, setPage] = React.useState(0);\r\n  const pageSize = 10;\r\n  const [sort, setSort] = React.useState(\"score\");\r\n  const [categorySub, setCategorySub] = React.useState<string[]>([]);\r\n  // const [applyTypoCorrection, setApplyTypoCorrection] = React.useState(true); // 오타교정 - 백엔드 미지원\r\n  const [products, setProducts] = React.useState<Product[]>([]);\r\n  const [loading, setLoading] = React.useState(false);\r\n  const [_brandAgg, setBrandAgg] = React.useState<AggregationBucket[]>([]);\r\n  const [_categoryAgg, setCategoryAgg] = React.useState<AggregationBucket[]>([]);\r\n  const [baseBrandAgg, setBaseBrandAgg] = React.useState<AggregationBucket[]>([]); // 최초 검색 시 aggregation 저장\r\n  const [baseCategoryAgg, setBaseCategoryAgg] = React.useState<AggregationBucket[]>([]); // 최초 검색 시 aggregation 저장\r\n  const [totalResults, setTotalResults] = React.useState(0);\r\n  const [totalPages, setTotalPages] = React.useState(0);\r\n  const [popularKeywords, setPopularKeywords] = React.useState<Array<{ \r\n    keyword: string, \r\n    searchCount: number, \r\n    rank: number, \r\n    previousRank: number | null, \r\n    rankChange: number | null, \r\n    changeStatus: \"UP\" | \"DOWN\" | \"NEW\" | \"SAME\" \r\n  }>>([]);\r\n  const [trendingKeywords, setTrendingKeywords] = React.useState<Array<{ \r\n    keyword: string, \r\n    searchCount: number, \r\n    rank: number, \r\n    previousRank: number | null, \r\n    rankChange: number | null, \r\n    changeStatus: \"UP\" | \"DOWN\" | \"NEW\" | \"SAME\" \r\n  }>>([]);\r\n  const [_relatedKeywords, _setRelatedKeywords] = React.useState<string[]>([]);\r\n  const [_hasSearched, setHasSearched] = React.useState(false); // 검색 실행 여부 추적\r\n\r\n  // 최소 로딩 시간을 보장하는 헬퍼 함수\r\n  const ensureMinimumLoadingTime = React.useCallback(async <T,>(apiCall: Promise<T>, minTime: number = 500): Promise<T> => {\r\n    const startTime = Date.now();\r\n    \r\n    const result = await apiCall;\r\n    const elapsedTime = Date.now() - startTime;\r\n    \r\n    if (elapsedTime < minTime) {\r\n      // 최소 시간이 되지 않았으면 추가 대기\r\n      await new Promise(resolve => setTimeout(resolve, minTime - elapsedTime));\r\n    }\r\n    \r\n    return result;\r\n  }, []);\r\n\r\n  // 초기 검색 실행 (새 검색어로 검색 시 - aggregation 업데이트)\r\n  const performInitialSearch = React.useCallback(async () => {\r\n    if (!searchQuery) {\r\n      setProducts([]);\r\n      setTotalResults(0);\r\n      setTotalPages(0);\r\n      setBrandAgg([]);\r\n      setCategoryAgg([]);\r\n      setBaseBrandAgg([]);\r\n      setBaseCategoryAgg([]);\r\n      return;\r\n    }\r\n\r\n    setHasSearched(true);\r\n    setLoading(true);\r\n    \r\n    // 필터 초기화\r\n    setBrand([]);\r\n    setCategory([]);\r\n    setCategorySub([]);\r\n    setPrice({ from: \"\", to: \"\" });\r\n    \r\n    try {\r\n      const searchRequest = {\r\n        query: searchQuery,\r\n        page: 0,\r\n        size: pageSize,\r\n        // applyTypoCorrection 파라미터는 백엔드에서 지원하지 않음\r\n      };\r\n\r\n      const response = await ensureMinimumLoadingTime(\r\n        enhancedSearchApi.executeSearch(searchRequest), \r\n        500 // 0.5초 최소 로딩\r\n      );\r\n\r\n      // API 응답을 Product 타입에 맞게 변환\r\n      const transformedProducts = response.hits.data.map((item) => ({\r\n        ...item,\r\n        id: item.id || String(Math.floor(Math.random() * 1000000)),\r\n        categoryName: item.categoryName || '',\r\n        specsRaw: item.specsRaw || '',\r\n        specs: item.specs || ''\r\n      }));\r\n\r\n      setProducts(transformedProducts);\r\n      setTotalResults(response.hits.total);\r\n      setTotalPages(response.meta.totalPages);\r\n      setPage(0);\r\n\r\n      // 최초 검색 시 aggregation 저장 (그룹 필터용)\r\n      if (response.aggregations?.brand_name) {\r\n        setBrandAgg(response.aggregations.brand_name);\r\n        setBaseBrandAgg(response.aggregations.brand_name);\r\n      }\r\n      if (response.aggregations?.category_name) {\r\n        setCategoryAgg(response.aggregations.category_name);\r\n        setBaseCategoryAgg(response.aggregations.category_name);\r\n      }\r\n\r\n    } catch (error) {\r\n      console.error('검색 오류:', error);\r\n      setProducts([]);\r\n      setTotalResults(0);\r\n      setTotalPages(0);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [searchQuery, pageSize, ensureMinimumLoadingTime]);\r\n\r\n  // 필터 검색 실행 (필터 변경 시 - 상품 리스트만 업데이트)\r\n  const performFilterSearch = React.useCallback(async () => {\r\n    if (!searchQuery && brand.length === 0 && category.length === 0 && categorySub.length === 0 && !price.from && !price.to) {\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    try {\r\n      // 정렬 필드와 순서 결정\r\n      let sortField: string = 'score';\r\n      let sortOrder: 'asc' | 'desc' = 'desc';\r\n\r\n      if (sort === 'price_asc') {\r\n        sortField = 'price';\r\n        sortOrder = 'asc';\r\n      } else if (sort === 'price_desc') {\r\n        sortField = 'price';\r\n        sortOrder = 'desc';\r\n      } else if (sort === 'reviewCount') {\r\n        sortField = 'reviewCount';\r\n        sortOrder = 'desc';\r\n      } else if (sort === 'registeredMonth') {\r\n        sortField = 'registeredMonth';\r\n        sortOrder = 'desc';\r\n      }\r\n\r\n      const searchRequest = {\r\n        query: searchQuery || \"\",\r\n        page: page,\r\n        size: pageSize,\r\n        sortField: sortField,\r\n        sortOrder: sortOrder,\r\n        // applyTypoCorrection 파라미터는 백엔드에서 지원하지 않음\r\n        ...(brand.length > 0 && { brand }),\r\n        ...(category.length > 0 && { category }),\r\n        ...(price.from && { priceFrom: Number(price.from) }),\r\n        ...(price.to && { priceTo: Number(price.to) })\r\n      };\r\n\r\n      const response = await ensureMinimumLoadingTime(\r\n        enhancedSearchApi.executeSearch(searchRequest), \r\n        600 // 필터링은 조금 더 빠르게\r\n      );\r\n\r\n      // API 응답을 Product 타입에 맞게 변환\r\n      const transformedProducts = response.hits.data.map((item) => ({\r\n        ...item,\r\n        id: item.id || String(Math.floor(Math.random() * 1000000)),\r\n        categoryName: item.categoryName || '',\r\n        specsRaw: item.specsRaw || '',\r\n        specs: item.specs || ''\r\n      }));\r\n\r\n      setProducts(transformedProducts);\r\n      setTotalResults(response.hits.total);\r\n      setTotalPages(response.meta.totalPages);\r\n\r\n      // 그룹 필터: aggregation은 최초 검색 결과 유지 (업데이트하지 않음)\r\n      // 필터 옵션은 baseBrandAgg, baseCategoryAgg를 사용\r\n\r\n    } catch (error) {\r\n      console.error('검색 오류:', error);\r\n      setProducts([]);\r\n      setTotalResults(0);\r\n      setTotalPages(0);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [searchQuery, page, pageSize, sort, brand, category, categorySub, price, ensureMinimumLoadingTime]);\r\n\r\n  // 어제 날짜 범위를 계산하는 함수 (대시보드와 동일 포맷: 로컬 기준 YYYY-MM-DDTHH:mm:ss)\r\n  const getYesterdayDateRange = () => {\r\n    const today = new Date();\r\n    const yesterday = new Date(today);\r\n    yesterday.setDate(today.getDate() - 1);\r\n\r\n    const y = yesterday.getFullYear();\r\n    const m = String(yesterday.getMonth() + 1).padStart(2, '0');\r\n    const d = String(yesterday.getDate()).padStart(2, '0');\r\n\r\n    return {\r\n      from: `${y}-${m}-${d}T00:00:00`,\r\n      to: `${y}-${m}-${d}T23:59:59`\r\n    };\r\n  };\r\n\r\n  // 인기/급등 검색어 로드\r\n  React.useEffect(() => {\r\n    const loadKeywords = async () => {\r\n      try {\r\n        const { from, to } = getYesterdayDateRange();\r\n\r\n        // 데모 페이지: 어제 하루치 기준으로 조회 (대시보드와 동일 파라미터 구성)\r\n        const commonParams = { from, to, limit: 10 };\r\n        const [popularResponse, trendingResponse] = await Promise.all([\r\n          dashboardApi.getPopularKeywords(commonParams),\r\n          dashboardApi.getTrendingKeywords(commonParams)\r\n        ]);\r\n\r\n        // 인기 검색어 정렬/상위 10개 제한 + 표시용 순번 보정\r\n        const sortedPopular = [...popularResponse.keywords].sort((a: any, b: any) => {\r\n          const ra = a.rank ?? Number.MAX_SAFE_INTEGER\r\n          const rb = b.rank ?? Number.MAX_SAFE_INTEGER\r\n          if (ra !== rb) return ra - rb\r\n          const ca = (a as any).searchCount ?? a.count ?? 0\r\n          const cb = (b as any).searchCount ?? b.count ?? 0\r\n          return cb - ca\r\n        }).slice(0, 10)\r\n\r\n        setPopularKeywords(sortedPopular.map((k: any, idx: number) => ({\r\n          keyword: k.keyword,\r\n          searchCount: (k as any).searchCount ?? k.count ?? 0,\r\n          rank: idx + 1,\r\n          previousRank: (k as any).previousRank ?? null,\r\n          rankChange: (k as any).rankChange ?? null,\r\n          changeStatus: (k as any).changeStatus ?? \"SAME\"\r\n        })));\r\n\r\n        // 급등 검색어 정렬/상위 10개 제한 + 표시용 순번 보정\r\n        const sortedTrending = [...trendingResponse.keywords].sort((a: any, b: any) => {\r\n          const ra = a.rank ?? Number.MAX_SAFE_INTEGER\r\n          const rb = b.rank ?? Number.MAX_SAFE_INTEGER\r\n          if (ra !== rb) return ra - rb\r\n          const ca = a.searchCount ?? a.count ?? 0\r\n          const cb = b.searchCount ?? b.count ?? 0\r\n          return cb - ca\r\n        }).slice(0, 10)\r\n\r\n        setTrendingKeywords(sortedTrending.map((k: any, idx: number) => ({\r\n          keyword: k.keyword,\r\n          searchCount: k.searchCount ?? k.count ?? 0,\r\n          // UI 표시는 1~10로 보정\r\n          rank: idx + 1,\r\n          previousRank: k.previousRank ?? null,\r\n          rankChange: k.rankChange ?? null,\r\n          changeStatus: k.changeStatus ?? (k.rankChange && k.rankChange > 0 ? \"UP\" : k.rankChange && k.rankChange < 0 ? \"DOWN\" : \"SAME\")\r\n        })));\r\n\r\n      } catch (error) {\r\n        console.error('검색어 로드 오류:', error);\r\n      }\r\n    };\r\n\r\n    loadKeywords();\r\n  }, []);\r\n\r\n  // 새 검색어로 검색 시 (초기 검색)\r\n  React.useEffect(() => {\r\n    if (searchQuery) {\r\n      performInitialSearch();\r\n    }\r\n  }, [searchQuery, performInitialSearch]);\r\n\r\n  // 필터 변경 시 (필터 검색)\r\n  React.useEffect(() => {\r\n    if (searchQuery) { // 검색어가 있을 때만 필터 적용\r\n      performFilterSearch();\r\n    }\r\n  }, [brand, category, categorySub, page, sort, performFilterSearch]);\r\n\r\n  // 핸들러\r\n  const handleSearch = React.useCallback((val: string) => {\r\n    setSearchQuery(val);\r\n    setQuery(val); // 검색창에도 반영\r\n  }, []);\r\n\r\n  // 필터 초기화\r\n  const resetFilters = () => {\r\n    setBrand([]);\r\n    setCategory([]);\r\n    setCategorySub([]);\r\n    setPrice({ from: \"\", to: \"\" });\r\n    setPage(0);\r\n  };\r\n\r\n  // 정렬 변경 핸들러\r\n  const handleSortChange = (newSort: string) => {\r\n    setSort(newSort);\r\n    setPage(0);\r\n  };\r\n\r\n  // 가격 검색 핸들러 - 가격 버튼을 눌렀을 때만 검색 실행\r\n  const handlePriceSearch = () => {\r\n    setPage(0);\r\n    if (searchQuery) {\r\n      performFilterSearch();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex flex-col items-center py-0 font-sans\">\r\n      <div className=\"w-full max-w-[80%] mx-auto\">\r\n      <SearchHeader\r\n        query={query}\r\n        setQuery={setQuery}\r\n        onSearch={handleSearch}\r\n        relatedKeywords={[]}\r\n        // 오타교정 props 제거 - 백엔드 미지원\r\n      />\r\n\r\n\r\n      {/* 중앙: 좌측(필터+리스트), 우측(인기/급등) 2열 레이아웃 */}\r\n      <div className=\"w-full grid grid-cols-10 gap-4 mt-2 items-start\">\r\n        {/* 좌측: 필터 + 상품리스트 (같은 컬럼에 세로 배치) */}\r\n        <div className=\"col-span-8 space-y-4\">\r\n          <ProductFilters\r\n            category={category}\r\n            setCategory={setCategory}\r\n            categorySub={categorySub}\r\n            setCategorySub={setCategorySub}\r\n            brand={brand}\r\n            setBrand={setBrand}\r\n            price={price}\r\n            setPrice={setPrice}\r\n            brandAgg={baseBrandAgg} // 그룹 필터: 최초 검색 결과 사용\r\n            categoryAgg={baseCategoryAgg} // 그룹 필터: 최초 검색 결과 사용\r\n            onResetFilters={resetFilters}\r\n            onPriceSearch={handlePriceSearch}\r\n          />\r\n\r\n          <ProductList\r\n            products={products}\r\n            loading={loading}\r\n            totalResults={totalResults}\r\n            totalPages={totalPages}\r\n            page={page}\r\n            setPage={setPage}\r\n            sort={sort}\r\n            onSortChange={handleSortChange}\r\n            searchQuery={searchQuery}\r\n          />\r\n        </div>\r\n\r\n        {/* 우측: 인기/급등 검색어 */}\r\n        <div className=\"col-span-2 flex flex-col\">\r\n          <PopularKeywords\r\n            keywords={popularKeywords}\r\n            onKeywordClick={handleSearch}\r\n          />\r\n          <TrendingKeywords\r\n            keywords={trendingKeywords}\r\n            onKeywordClick={handleSearch}\r\n          />\r\n        </div>\r\n      </div>\r\n      </div>\r\n    </div>\r\n  );\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\answer-set\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\ActionButtons.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2934,2937],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2934,2937],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3269,3272],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3269,3272],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from \"@/components/ui/button\"\r\nimport { RefreshCw, Zap, Trash2 } from \"lucide-react\"\r\nimport { useAsyncTask } from \"@/hooks/use-async-task\"\r\nimport { getTaskProgressText, getTaskCompletionMessage } from \"@/utils/evaluation-helpers\"\r\nimport { QueryGenerationDialog } from \"./QueryGenerationDialog\"\r\nimport { QueryCreateDialog } from \"./QueryCreateDialog\"\r\nimport { useToast } from \"@/components/ui/use-toast\"\r\nimport type { GenerateQueriesRequest } from \"@/services/evaluation/types\"\r\n\r\ninterface ActionButtonsProps {\r\n  selectedQueryIds: number[]\r\n  onGenerateQueries: (data: GenerateQueriesRequest) => Promise<{ taskId: number; message: string }>\r\n  onCreateQuery: (text: string) => Promise<void>\r\n  onGenerateCandidates: () => Promise<{ taskId: number; message: string }>\r\n  onEvaluateLlm: () => Promise<{ taskId: number; message: string }>\r\n  onDeleteSelected: () => Promise<void>\r\n  isDeleting: boolean\r\n  compact?: boolean\r\n}\r\n\r\nexport function ActionButtons({\r\n  selectedQueryIds,\r\n  onGenerateQueries,\r\n  onCreateQuery,\r\n  onGenerateCandidates,\r\n  onEvaluateLlm,\r\n  onDeleteSelected,\r\n  isDeleting,\r\n  compact = false\r\n}: ActionButtonsProps) {\r\n  const { toast } = useToast()\r\n  \r\n  const queryGenTask = useAsyncTask('QUERY_GENERATION', {\r\n    onComplete: (result) => {\r\n      toast({\r\n        title: \"쿼리 생성 완료\",\r\n        description: getTaskCompletionMessage('QUERY_GENERATION', result),\r\n        variant: \"success\"\r\n      })\r\n    },\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"쿼리 생성 실패\",\r\n        description: error,\r\n        variant: \"destructive\"\r\n      })\r\n    }\r\n  })\r\n\r\n  const candidateGenTask = useAsyncTask('CANDIDATE_GENERATION', {\r\n    onComplete: () => {\r\n      toast({\r\n        title: \"후보군 생성 완료\",\r\n        description: getTaskCompletionMessage('CANDIDATE_GENERATION'),\r\n        variant: \"success\"\r\n      })\r\n    },\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"후보군 생성 실패\",\r\n        description: error,\r\n        variant: \"destructive\"\r\n      })\r\n    }\r\n  })\r\n\r\n  const llmEvalTask = useAsyncTask('LLM_EVALUATION', {\r\n    onComplete: () => {\r\n      toast({\r\n        title: \"LLM 평가 완료\",\r\n        description: getTaskCompletionMessage('LLM_EVALUATION'),\r\n        variant: \"success\"\r\n      })\r\n    },\r\n    onError: (error) => {\r\n      toast({\r\n        title: \"LLM 평가 실패\",\r\n        description: error,\r\n        variant: \"destructive\"\r\n      })\r\n    }\r\n  })\r\n\r\n  const handleGenerateQueries = async (data: GenerateQueriesRequest) => {\r\n    const response = await onGenerateQueries(data)\r\n    queryGenTask.startTask(response.taskId)\r\n  }\r\n\r\n  const handleGenerateCandidates = async () => {\r\n    if (selectedQueryIds.length === 0) {\r\n      toast({\r\n        title: \"선택 필요\",\r\n        description: \"쿼리를 선택해주세요.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n    \r\n    const response = await onGenerateCandidates()\r\n    candidateGenTask.startTask((response as any).taskId)\r\n  }\r\n\r\n  const handleEvaluateLlm = async () => {\r\n    if (selectedQueryIds.length === 0) {\r\n      toast({\r\n        title: \"선택 필요\",\r\n        description: \"쿼리를 선택해주세요.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n    \r\n    const response = await onEvaluateLlm()\r\n    llmEvalTask.startTask((response as any).taskId)\r\n  }\r\n\r\n  const handleDeleteSelected = async () => {\r\n    if (selectedQueryIds.length === 0) {\r\n      toast({\r\n        title: \"선택 필요\",\r\n        description: \"삭제할 쿼리를 선택해주세요.\",\r\n        variant: \"destructive\"\r\n      })\r\n      return\r\n    }\r\n    \r\n    if (confirm(`선택된 ${selectedQueryIds.length}개 쿼리를 삭제하시겠습니까?`)) {\r\n      await onDeleteSelected()\r\n    }\r\n  }\r\n\r\n  if (compact) {\r\n    return (\r\n      <div className=\"flex w-full justify-end items-center gap-2\">\r\n        {/* 4. 정답셋 자동생성 - 맨 왼쪽, 파란색 */}\r\n        <QueryGenerationDialog\r\n          onGenerate={handleGenerateQueries}\r\n          isGenerating={false}\r\n          isTaskRunning={queryGenTask.isRunning}\r\n        />\r\n        {/* 1. 쿼리 추가 - 흰색 */}\r\n        <QueryCreateDialog onCreate={onCreateQuery} />\r\n        {/* 2. 후보군 생성 */}\r\n        <Button \r\n          size=\"sm\" \r\n          variant=\"outline\"\r\n          onClick={handleGenerateCandidates}\r\n          disabled={candidateGenTask.isRunning || selectedQueryIds.length === 0}\r\n          className=\"border-green-600 text-green-600 hover:bg-green-50\"\r\n        >\r\n          <RefreshCw className={`h-4 w-4 mr-1 ${candidateGenTask.isRunning ? 'animate-spin' : ''}`} />\r\n          {candidateGenTask.isRunning \r\n            ? getTaskProgressText(candidateGenTask.data, '후보군 생성')\r\n            : '후보군 생성'\r\n          }\r\n        </Button>\r\n        {/* 3. 후보군 자동평가 */}\r\n        <Button \r\n          size=\"sm\" \r\n          variant=\"outline\"\r\n          onClick={handleEvaluateLlm}\r\n          disabled={llmEvalTask.isRunning || selectedQueryIds.length === 0}\r\n          className=\"border-gray-300 hover:bg-gray-50\"\r\n        >\r\n          <Zap className={`h-4 w-4 mr-1 ${llmEvalTask.isRunning ? 'animate-pulse' : ''}`} />\r\n          {llmEvalTask.isRunning \r\n            ? getTaskProgressText(llmEvalTask.data, '후보군 자동평가')\r\n            : '후보군 자동평가'\r\n          }\r\n        </Button>\r\n        \r\n        <Button \r\n          size=\"sm\" \r\n          variant=\"outline\"\r\n          onClick={handleDeleteSelected}\r\n          disabled={isDeleting || selectedQueryIds.length === 0}\r\n          className=\"border-red-300 text-red-600 hover:bg-red-50\"\r\n        >\r\n          <Trash2 className=\"h-4 w-4 mr-1\" />\r\n          선택 삭제\r\n        </Button>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-end w-full\">\r\n      <div className=\"flex items-center gap-2\">\r\n        {/* 4. 정답셋 자동생성 - 맨 왼쪽, 파란색 */}\r\n        <QueryGenerationDialog\r\n          onGenerate={handleGenerateQueries}\r\n          isGenerating={false}\r\n          isTaskRunning={queryGenTask.isRunning}\r\n        />\r\n        {/* 1. 쿼리 추가 - 흰색 */}\r\n        <QueryCreateDialog onCreate={onCreateQuery} />\r\n        {/* 2. 후보군 생성 */}\r\n        <Button \r\n          size=\"sm\" \r\n          variant=\"outline\"\r\n          onClick={handleGenerateCandidates}\r\n          disabled={candidateGenTask.isRunning || selectedQueryIds.length === 0}\r\n        >\r\n          <RefreshCw className={`h-4 w-4 mr-2 ${candidateGenTask.isRunning ? 'animate-spin' : ''}`} />\r\n          {candidateGenTask.isRunning \r\n            ? getTaskProgressText(candidateGenTask.data, '후보군 생성')\r\n            : '후보군 생성'\r\n          }\r\n        </Button>\r\n        {/* 3. 후보군 자동평가 */}\r\n        <Button \r\n          size=\"sm\" \r\n          variant=\"outline\"\r\n          onClick={handleEvaluateLlm}\r\n          disabled={llmEvalTask.isRunning || selectedQueryIds.length === 0}\r\n        >\r\n          <Zap className={`h-4 w-4 mr-2 ${llmEvalTask.isRunning ? 'animate-pulse' : ''}`} />\r\n          {llmEvalTask.isRunning \r\n            ? getTaskProgressText(llmEvalTask.data, '후보군 자동평가')\r\n            : '후보군 자동평가'\r\n          }\r\n        </Button>\r\n        {/* 4. 정답셋 자동생성 */}\r\n        <QueryGenerationDialog\r\n          onGenerate={handleGenerateQueries}\r\n          isGenerating={false}\r\n          isTaskRunning={queryGenTask.isRunning}\r\n        />\r\n        <Button \r\n          size=\"sm\" \r\n          variant=\"destructive\"\r\n          onClick={handleDeleteSelected}\r\n          disabled={isDeleting || selectedQueryIds.length === 0}\r\n        >\r\n          <Trash2 className=\"h-4 w-4 mr-2\" />\r\n          선택 삭제\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  )\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\DocumentTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\EvaluationReportViewer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":102,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":102,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3487,3490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3487,3490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3775,3778],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3775,3778],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":239,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":239,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8740,8743],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8740,8743],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":240,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":240,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8798,8801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8798,8801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":241,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":241,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8859,8862],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8859,8862],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { formatDate } from \"@/utils/evaluation-helpers\"\r\nimport { EVALUATION_CONFIG } from \"@/constants/evaluation\"\r\nimport { PerformanceScore } from \"./PerformanceScore\"\r\nimport type { EvaluationReport } from \"@/services/evaluation/types\"\r\n\r\ninterface EvaluationReportViewerProps {\r\n  report: EvaluationReport\r\n}\r\n\r\nexport function EvaluationReportViewer({ report }: EvaluationReportViewerProps) {\r\n  const queryDetails = report.queryDetails || []\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* 전체 성능 지표 */}\r\n      <div className=\"grid grid-cols-3 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <PerformanceScore \r\n              score={report.averagePrecision} \r\n              label=\"Precision\"\r\n              size=\"lg\"\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <PerformanceScore \r\n              score={report.averageRecall} \r\n              label=\"Recall\"\r\n              size=\"lg\"\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n        <Card>\r\n          <CardContent className=\"pt-6\">\r\n            <PerformanceScore \r\n              score={report.averageF1Score} \r\n              label=\"F1 Score\"\r\n              size=\"lg\"\r\n            />\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* 통계 정보 */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg\">평가 통계</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-blue-600\">{report.totalQueries}</div>\r\n              <div className=\"text-sm text-gray-600\">총 쿼리</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-green-600\">{report.totalRelevantDocuments}</div>\r\n              <div className=\"text-sm text-gray-600\">관련 문서</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-yellow-600\">{report.totalRetrievedDocuments}</div>\r\n              <div className=\"text-sm text-gray-600\">검색된 문서</div>\r\n            </div>\r\n            <div className=\"text-center\">\r\n              <div className=\"text-2xl font-bold text-purple-600\">{report.totalCorrectDocuments}</div>\r\n              <div className=\"text-sm text-gray-600\">정답 문서</div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* 쿼리별 상세 결과 */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"text-lg\">쿼리별 성능 분석</CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {Array.isArray(queryDetails) && queryDetails.length > 0 ? (\r\n            <QueryDetailsView queryDetails={queryDetails} />\r\n          ) : (\r\n            <div className=\"text-center py-8 text-gray-500\">\r\n              쿼리별 상세 데이터가 없습니다.\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* 생성 정보 */}\r\n      <div className=\"text-sm text-gray-600 border-t pt-4\">\r\n        <div className=\"flex justify-between\">\r\n          <span>생성 시간:</span>\r\n          <span>{formatDate(report.createdAt)}</span>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction QueryDetailsView({ queryDetails }: { queryDetails: any[] }) {\r\n  const [expandedMap, setExpandedMap] = useState<Record<number, boolean>>({})\r\n\r\n  const toggleRow = (index: number) => {\r\n    setExpandedMap((prev) => ({ ...prev, [index]: !prev[index] }))\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-2\">\r\n      {queryDetails.map((detail: any, index: number) => {\r\n        const expanded = !!expandedMap[index]\r\n        return (\r\n          <div key={index} className=\"border rounded-lg overflow-hidden\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => toggleRow(index)}\r\n              className=\"w-full flex items-center justify-between p-3 hover:bg-gray-50\"\r\n            >\r\n              <div className=\"text-sm font-semibold text-gray-900 truncate pr-3\">{detail.query}</div>\r\n              <div className=\"flex items-center gap-3\">\r\n                <PerformanceScore \r\n                  score={detail.precision} \r\n                  label=\"P\" \r\n                  size=\"sm\"\r\n                  showPercentage={true}\r\n                />\r\n                <PerformanceScore \r\n                  score={detail.recall} \r\n                  label=\"R\" \r\n                  size=\"sm\"\r\n                  showPercentage={true}\r\n                />\r\n              </div>\r\n            </button>\r\n            {expanded && (\r\n              <div className=\"p-3 border-t space-y-3\">\r\n                <div className=\"flex items-center justify-end gap-4 text-xs text-gray-600\">\r\n                  <div>관련: {detail.relevantCount}</div>\r\n                  <div>검색: {detail.retrievedCount}</div>\r\n                  <div>정답: {detail.correctCount}</div>\r\n                </div>\r\n                {(detail.missingDocuments?.length > 0 || detail.wrongDocuments?.length > 0) ? (\r\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3 text-xs\">\r\n                    {detail.missingDocuments?.length > 0 && (\r\n                      <DocumentList \r\n                        documents={detail.missingDocuments}\r\n                        title=\"정답 누락\"\r\n                        subtitle=\"실제 정답인데 검색 결과에 없음\"\r\n                        bgColor=\"bg-red-50\"\r\n                        textColor=\"text-red-800\"\r\n                        subTextColor=\"text-red-600\"\r\n                        moreTextColor=\"text-red-500\"\r\n                        showAllDocs={true}\r\n                      />\r\n                    )}\r\n                    {detail.wrongDocuments?.length > 0 && (\r\n                      <DocumentList \r\n                        documents={detail.wrongDocuments}\r\n                        title=\"오답 포함\"\r\n                        subtitle=\"검색 결과에 포함되었으나 정답이 아님\"\r\n                        bgColor=\"bg-yellow-50\"\r\n                        textColor=\"text-yellow-800\"\r\n                        subTextColor=\"text-yellow-600\"\r\n                        moreTextColor=\"text-yellow-500\"\r\n                        showAllDocs={true}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                ) : (\r\n                  <div className=\"text-xs text-gray-500\">이슈 문서가 없습니다.</div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n        )\r\n      })}\r\n    </div>\r\n  )\r\n}\r\n\r\n// removed old QueryDetailCard in favor of clickable rows with expand/collapse\r\n\r\ntype ReportDoc = string | { productId: string; productName: string | null; productSpecs: string | null }\r\n\r\nfunction DocumentList({ \r\n  documents, \r\n  title, \r\n  subtitle,\r\n  bgColor, \r\n  textColor, \r\n  subTextColor, \r\n  moreTextColor,\r\n  showAllDocs = false\r\n}: {\r\n  documents: ReportDoc[]\r\n  title: string\r\n  subtitle?: string\r\n  bgColor: string\r\n  textColor: string\r\n  subTextColor: string\r\n  moreTextColor: string\r\n  showAllDocs?: boolean\r\n}) {\r\n  const [expandedRows, setExpandedRows] = useState<Record<number, boolean>>({})\r\n  const maxDisplayed = EVALUATION_CONFIG.MAX_DISPLAYED_MISSING_DOCS\r\n  const displayedDocs = showAllDocs ? documents : documents.slice(0, maxDisplayed)\r\n  const remainingCount = showAllDocs ? 0 : (documents.length - maxDisplayed)\r\n\r\n  const toggleRow = (index: number) => {\r\n    setExpandedRows((prev) => ({ ...prev, [index]: !prev[index] }))\r\n  }\r\n\r\n  const parseDocString = (raw: string): { productId?: string; productName?: string; productSpecs?: string } => {\r\n    // 예상 포맷: \"{id} {name} | {specs}\" 또는 임의 문자열\r\n    const match = raw.match(/^(\\S+)\\s+(.*?)\\s*\\|\\s*(.*)$/)\r\n    if (match) {\r\n      return { productId: match[1], productName: match[2], productSpecs: match[3] }\r\n    }\r\n    return { productName: raw }\r\n  }\r\n\r\n  return (\r\n    <div className={`${bgColor} p-2 rounded`}>\r\n      <div className={`${textColor} font-medium mb-1`}>\r\n        {title} ({documents.length})\r\n      </div>\r\n      {subtitle && (\r\n        <div className=\"text-[11px] text-gray-600 mb-1\">{subtitle}</div>\r\n      )}\r\n      <div className=\"text-[11px] text-gray-600 mb-1 grid grid-cols-12 gap-2 px-1\">\r\n        <div className=\"col-span-2\">상품ID</div>\r\n        <div className=\"col-span-5\">상품명</div>\r\n        <div className=\"col-span-5\">스펙</div>\r\n      </div>\r\n      <div className={`${subTextColor} divide-y`}>\r\n        {displayedDocs.map((doc: ReportDoc, i: number) => {\r\n          const parsed = typeof doc === 'string' ? parseDocString(doc) : doc\r\n          const productId = (parsed as any)?.productId\r\n          const productName = (parsed as any)?.productName\r\n          const productSpecs = (parsed as any)?.productSpecs\r\n          const expanded = !!expandedRows[i]\r\n          const hasStructured = productId || productName || productSpecs\r\n          return (\r\n            <div key={i} className=\"grid grid-cols-12 gap-2 py-1 px-1 items-start\">\r\n              {hasStructured ? (\r\n                <>\r\n                  <div className=\"col-span-2\">\r\n                    {productId ? (\r\n                      <span className=\"font-mono text-[11px] bg-white/70 px-1 py-0.5 rounded border\">{productId}</span>\r\n                    ) : (\r\n                      <span className=\"text-[11px] text-gray-400\">-</span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"col-span-5\">\r\n                    {productName ? (\r\n                      <div className=\"truncate\">{productName}</div>\r\n                    ) : (\r\n                      <span className=\"text-gray-400\">-</span>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"col-span-5\">\r\n                    {productSpecs ? (\r\n                      <>\r\n                        <div className={expanded ? \"whitespace-pre-wrap break-all\" : \"truncate\"}>{productSpecs}</div>\r\n                        {productSpecs.length > 0 && (\r\n                          <button\r\n                            type=\"button\"\r\n                            onClick={() => toggleRow(i)}\r\n                            className=\"mt-0.5 text-[11px] underline text-gray-600 hover:text-gray-800\"\r\n                          >\r\n                            {expanded ? '접기' : '펼치기'}\r\n                          </button>\r\n                        )}\r\n                      </>\r\n                    ) : (\r\n                      <span className=\"text-gray-400\">-</span>\r\n                    )}\r\n                  </div>\r\n                </>\r\n              ) : (\r\n                <div className=\"col-span-12 whitespace-pre-wrap break-all text-xs\">{String(doc)}</div>\r\n              )}\r\n            </div>\r\n          )\r\n        })}\r\n        {remainingCount > 0 && (\r\n          <div className={`px-1 py-1 ${moreTextColor}`}>\r\n            +{remainingCount}개 더\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n// (구 파싱 오류 뷰 제거됨)","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\PaginationControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\PerformanceScore.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\QueryCreateDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\QueryEditDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\QueryGenerationDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1584,1587],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1584,1587],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1608,1611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1608,1611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1743,1746],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1743,1746],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Label } from \"@/components/ui/label\"\r\nimport { \r\n  Dialog,\r\n  DialogContent,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\"\r\nimport { Plus } from \"lucide-react\"\r\nimport { EVALUATION_CONFIG } from \"@/constants/evaluation\"\r\nimport type { GenerateQueriesRequest } from \"@/services/evaluation/types\"\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { useEvaluationCategories } from \"@/hooks/use-evaluation\"\r\n\r\ninterface QueryGenerationDialogProps {\r\n  onGenerate: (data: GenerateQueriesRequest) => Promise<void>\r\n  isGenerating: boolean\r\n  isTaskRunning: boolean\r\n  disabled?: boolean\r\n}\r\n\r\nexport function QueryGenerationDialog({\r\n  onGenerate,\r\n  isGenerating,\r\n  isTaskRunning,\r\n  disabled = false\r\n}: QueryGenerationDialogProps) {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const [queryCount, setQueryCount] = useState<number>(EVALUATION_CONFIG.DEFAULT_QUERY_COUNT)\r\n  const [minCandidates, setMinCandidates] = useState<number | undefined>(60)\r\n  const [maxCandidates, setMaxCandidates] = useState<number | undefined>(200)\r\n  const [category, setCategory] = useState<string>(\"\")\r\n  const { data: categoriesData } = useEvaluationCategories(100, isOpen)\r\n\r\n  // 다양한 응답 스키마 대응: { categories: [...] } | { data: { categories: [...] } } | string[]\r\n  const categoryOptions = ((): Array<{ name: string; docCount?: number }> => {\r\n    const raw: any = categoriesData as any\r\n    const list = raw?.categories ?? raw?.data?.categories ?? raw ?? []\r\n    if (Array.isArray(list)) {\r\n      return list.map((c: any) =>\r\n        typeof c === 'string' ? { name: c, docCount: 0 } : { name: c.name ?? String(c), docCount: c.docCount }\r\n      )\r\n    }\r\n    return []\r\n  })()\r\n\r\n  const handleGenerate = async () => {\r\n    try {\r\n      const payload: GenerateQueriesRequest = {\r\n        count: queryCount,\r\n        minCandidates,\r\n        maxCandidates,\r\n        category: category || undefined,\r\n      }\r\n      await onGenerate(payload)\r\n      setIsOpen(false)\r\n    } catch (_error) {\r\n      // 에러는 부모에서 처리\r\n    }\r\n  }\r\n\r\n  // 다이얼로그가 열릴 때만 카테고리 조회 (enabled: isOpen)\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={setIsOpen}>\r\n      <DialogTrigger asChild>\r\n        <Button size=\"sm\" className=\"bg-blue-600 hover:bg-blue-700 text-white\" disabled={disabled}>\r\n          <Plus className=\"h-4 w-4 mr-2\" />\r\n          정답셋 자동생성\r\n        </Button>\r\n      </DialogTrigger>\r\n      <DialogContent className=\"max-w-md\">\r\n        <DialogHeader>\r\n          <DialogTitle>정답셋 자동생성</DialogTitle>\r\n        </DialogHeader>\r\n        <div className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-2 gap-3\">\r\n            <div>\r\n              <Label htmlFor=\"queryCount\" className=\"text-sm font-medium\">생성 개수</Label>\r\n              <Input\r\n                id=\"queryCount\"\r\n                type=\"number\"\r\n                value={queryCount}\r\n                onChange={(e) => setQueryCount(Number(e.target.value))}\r\n                min={1}\r\n                max={EVALUATION_CONFIG.MAX_QUERY_COUNT}\r\n                className=\"text-sm mt-1\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label className=\"text-sm font-medium\">카테고리(선택)</Label>\r\n              <Select value={category} onValueChange={setCategory}>\r\n                <SelectTrigger className=\"w-full text-sm mt-1\">\r\n                  <SelectValue placeholder=\"카테고리를 선택하세요\" />\r\n                </SelectTrigger>\r\n                <SelectContent className=\"text-sm\">\r\n                  {categoryOptions.map((c) => (\r\n                    <SelectItem key={c.name} value={c.name} className=\"text-sm\">\r\n                      {c.name}{typeof c.docCount === 'number' ? ` (${c.docCount.toLocaleString()})` : ''}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"minCandidates\" className=\"text-sm font-medium\">최소 후보 수(선택)</Label>\r\n              <Input\r\n                id=\"minCandidates\"\r\n                type=\"number\"\r\n                value={minCandidates ?? ''}\r\n                onChange={(e) => setMinCandidates(e.target.value === '' ? undefined : Number(e.target.value))}\r\n                min={1}\r\n                className=\"text-sm mt-1\"\r\n              />\r\n            </div>\r\n            <div>\r\n              <Label htmlFor=\"maxCandidates\" className=\"text-sm font-medium\">최대 후보 수(선택)</Label>\r\n              <Input\r\n                id=\"maxCandidates\"\r\n                type=\"number\"\r\n                value={maxCandidates ?? ''}\r\n                onChange={(e) => setMaxCandidates(e.target.value === '' ? undefined : Number(e.target.value))}\r\n                min={1}\r\n                className=\"text-sm mt-1\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"flex justify-end gap-2\">\r\n            <Button \r\n              variant=\"outline\" \r\n              size=\"sm\" \r\n              onClick={() => setIsOpen(false)}\r\n              disabled={isGenerating}\r\n            >\r\n              취소\r\n            </Button>\r\n            <Button \r\n              size=\"sm\"\r\n              onClick={handleGenerate}\r\n              disabled={isGenerating || isTaskRunning}\r\n            >\r\n              {isGenerating ? '시작중...' : '생성'}\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\QueryTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used. Allowed unused vars must match /^_/u.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used. Allowed unused vars must match /^_/u.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'EVALUATION_CONFIG' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Search' is defined but never used. Allowed unused vars must match /^_/u.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":16}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\"\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\"\r\n// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { DataTableToolbar } from \"@/components/common/DataTableToolbar\"\r\nimport { Skeleton } from \"@/components/ui/skeleton\"\r\nimport { Checkbox } from \"@/components/ui/checkbox\"\r\nimport { \r\n  useGenerateQueriesAsync,\r\n  useGenerateCandidatesAsync,\r\n  useEvaluateLlmAsync,\r\n  useUpdateQuery,\r\n  useDeleteQueries,\r\n  useCreateQuery,\r\n} from \"@/hooks/use-evaluation\"\r\nimport { calculateSelectionState } from \"@/utils/evaluation-helpers\"\r\nimport { EVALUATION_CONFIG } from \"@/constants/evaluation\"\r\nimport { ActionButtons } from \"./ActionButtons\"\r\nimport { PaginationControls } from \"./PaginationControls\"\r\nimport { QueryTableRow } from \"./QueryTableRow\"\r\nimport { QueryEditDialog } from \"./QueryEditDialog\"\r\nimport type { EvaluationQuery } from \"@/services\"\r\nimport { useToast } from \"@/components/ui/use-toast\"\r\nimport { Search } from \"lucide-react\"\r\n// no-op\r\n\r\ninterface QueryTableProps {\r\n  queries: EvaluationQuery[]\r\n  selectedQueryIds: number[]\r\n  onSelectQuery: (queryId: number, queryText: string, checked: boolean) => void\r\n  onSelectAll: (queryIds: number[], checked: boolean) => void\r\n  onQueryClick: (queryId: number, queryText: string) => void\r\n  onClearSelection: () => void\r\n  currentPage: number\r\n  totalPages: number\r\n  totalCount: number\r\n  pageSize: number\r\n  onPageChange: (page: number) => void\r\n  onPageSizeChange: (pageSize: number) => void\r\n  onRefresh?: () => void\r\n  isLoading: boolean\r\n  onSearch?: (text: string) => void\r\n}\r\n\r\nexport function QueryTable({\r\n  queries,\r\n  selectedQueryIds,\r\n  onSelectQuery,\r\n  onSelectAll,\r\n  onQueryClick,\r\n  onClearSelection,\r\n  currentPage,\r\n  totalPages,\r\n  totalCount,\r\n  pageSize,\r\n  onPageChange,\r\n  onPageSizeChange,\r\n  onSearch,\r\n  onRefresh: _onRefresh,\r\n  isLoading\r\n}: QueryTableProps) {\r\n  const [editingQuery, setEditingQuery] = useState<{ id: number, text: string } | null>(null)\r\n  const { toast } = useToast()\r\n  const [searchText, setSearchText] = useState(\"\")\r\n  \r\n  // 뮤테이션\r\n  const generateQueriesAsyncMutation = useGenerateQueriesAsync()\r\n  const generateCandidatesAsyncMutation = useGenerateCandidatesAsync()\r\n  const evaluateLlmAsyncMutation = useEvaluateLlmAsync()\r\n  const updateQueryMutation = useUpdateQuery()\r\n  const deleteQueryMutation = useDeleteQueries()\r\n  const createQueryMutation = useCreateQuery()\r\n\r\n  // 액션 핸들러들\r\n  const handleGenerateQueries = async (data: { count: number; minCandidates?: number; maxCandidates?: number; category?: string }) => {\r\n    return await generateQueriesAsyncMutation.mutateAsync(data)\r\n  }\r\n\r\n  const handleCreateQuery = async (text: string) => {\r\n    await createQueryMutation.mutateAsync({ value: text.trim() })\r\n    toast({ title: '추가 완료', description: '쿼리가 성공적으로 추가되었습니다.', variant: 'success' })\r\n  }\r\n\r\n  const handleGenerateCandidates = async () => {\r\n    return await generateCandidatesAsyncMutation.mutateAsync({ \r\n      generateForAllQueries: false, \r\n      queryIds: selectedQueryIds \r\n    })\r\n  }\r\n\r\n  const handleEvaluateLlm = async () => {\r\n    return await evaluateLlmAsyncMutation.mutateAsync({ \r\n      evaluateAllQueries: false, \r\n      queryIds: selectedQueryIds \r\n    })\r\n  }\r\n\r\n  const handleUpdateQuery = async (queryId: number, newText: string) => {\r\n    await updateQueryMutation.mutateAsync({ queryId, data: { value: newText.trim() } })\r\n    toast({\r\n      title: \"수정 완료\",\r\n      description: \"쿼리가 성공적으로 수정되었습니다.\",\r\n      variant: \"success\"\r\n    })\r\n  }\r\n\r\n  const handleDeleteQuery = async (queryId: number) => {\r\n    if (confirm('쿼리를 삭제하시겠습니까?')) {\r\n      await deleteQueryMutation.mutateAsync([queryId])\r\n      // 선택된 목록에서 해당 쿼리 제거\r\n      if (selectedQueryIds.includes(queryId)) {\r\n        onSelectQuery(queryId, '', false)\r\n      }\r\n      toast({\r\n        title: \"삭제 완료\",\r\n        description: \"쿼리가 성공적으로 삭제되었습니다.\",\r\n        variant: \"success\"\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleDeleteSelected = async () => {\r\n    const count = selectedQueryIds.length\r\n    await deleteQueryMutation.mutateAsync(selectedQueryIds)\r\n    onClearSelection()\r\n    toast({\r\n      title: \"삭제 완료\",\r\n      description: `${count}개 쿼리가 성공적으로 삭제되었습니다.`,\r\n      variant: \"success\"\r\n    })\r\n  }\r\n\r\n  // 전체 선택 관련 로직 (현재 페이지 기준)\r\n  const queriesWithId = queries.map(query => ({ id: query.id }))\r\n  const { isAllSelected } = calculateSelectionState(queriesWithId, selectedQueryIds)\r\n\r\n  // 헤더 전체 선택 핸들러\r\n  const handleHeaderSelectAll = (checked: boolean) => {\r\n    const queryIds = queries.map(query => query.id)\r\n    onSelectAll(queryIds, checked)\r\n  }\r\n\r\n\r\n\r\n  if (isLoading) {\r\n    return <QueryTableSkeleton />\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-3\">\r\n      {/* 액션 버튼들 - 왼쪽 정렬, 검색창과 여백 확보 */}\r\n      <div className=\"flex flex-wrap items-center gap-3 mb-8\">\r\n        <ActionButtons\r\n          selectedQueryIds={selectedQueryIds}\r\n          onGenerateQueries={handleGenerateQueries}\r\n          onCreateQuery={handleCreateQuery}\r\n          onGenerateCandidates={handleGenerateCandidates}\r\n          onEvaluateLlm={handleEvaluateLlm}\r\n          onDeleteSelected={handleDeleteSelected}\r\n          isDeleting={deleteQueryMutation.isPending}\r\n          compact\r\n        />\r\n      </div>\r\n\r\n      <DataTableToolbar\r\n        showSearch\r\n        searchValue={searchText}\r\n        onSearchChange={setSearchText}\r\n        onSearch={() => onSearch?.(searchText)}\r\n        totalCount={totalCount}\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        pageSize={pageSize}\r\n        onPageSizeChange={onPageSizeChange}\r\n        disabled={isLoading}\r\n      />\r\n\r\n      {/* 쿼리 테이블 */}\r\n      <div className=\"border border-gray-200 rounded-md overflow-hidden bg-white mt-0\">\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow className=\"bg-gray-50 hover:bg-gray-50\">\r\n            <TableHead className=\"w-10 py-2\">\r\n              <Checkbox\r\n                checked={isAllSelected}\r\n                onCheckedChange={(checked) => {\r\n                  handleHeaderSelectAll(checked === true)\r\n                }}\r\n              />\r\n            </TableHead>\r\n            <TableHead className=\"py-2 text-xs font-semibold text-gray-700\">쿼리</TableHead>\r\n            <TableHead className=\"py-2 text-xs font-semibold text-gray-700 text-center w-24\">문서수</TableHead>\r\n            <TableHead className=\"py-2 text-xs font-semibold text-gray-700 text-center w-16\">정답</TableHead>\r\n            <TableHead className=\"py-2 text-xs font-semibold text-gray-700 text-center w-16\">오답</TableHead>\r\n            <TableHead className=\"py-2 text-xs font-semibold text-gray-700 text-center w-20\">미지정</TableHead>\r\n            <TableHead className=\"py-2 text-xs font-semibold text-gray-700 text-center w-24\">액션</TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {queries.length === 0 ? (\r\n            <TableRow>\r\n              <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\r\n                <p className=\"text-sm\">등록된 쿼리가 없습니다</p>\r\n                <p className=\"text-xs text-gray-400 mt-1\">새 쿼리를 추가하거나 LLM으로 생성해보세요</p>\r\n              </TableCell>\r\n            </TableRow>\r\n          ) : (\r\n            queries.map((query) => {\r\n              const isSelected = selectedQueryIds.includes(query.id)\r\n              \r\n              return (\r\n                <QueryTableRow\r\n                  key={query.id}\r\n                  query={query}\r\n                  isSelected={isSelected}\r\n                  onSelect={onSelectQuery}\r\n                  onQueryClick={onQueryClick}\r\n                  onEdit={(queryId, queryText) => setEditingQuery({ id: queryId, text: queryText })}\r\n                  onDelete={handleDeleteQuery}\r\n                  isDeleting={deleteQueryMutation.isPending}\r\n                  rowClassName={isSelected ? 'bg-blue-50' : ''}\r\n                />\r\n              )\r\n            })\r\n          )}\r\n        </TableBody>\r\n      </Table>\r\n      </div>\r\n\r\n      {/* 페이지네이션 정보와 설정 */}\r\n      <PaginationControls\r\n        currentPage={currentPage}\r\n        totalPages={totalPages}\r\n        totalCount={totalCount}\r\n        pageSize={pageSize}\r\n        onPageChange={onPageChange}\r\n        onPageSizeChange={onPageSizeChange}\r\n      />\r\n\r\n      {/* 쿼리 편집 다이얼로그 */}\r\n      <QueryEditDialog\r\n        editingQuery={editingQuery}\r\n        onSave={handleUpdateQuery}\r\n        onClose={() => setEditingQuery(null)}\r\n        isSaving={updateQueryMutation.isPending}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n// 로딩 스켈레톤 컴포넌트\r\nfunction QueryTableSkeleton() {\r\n  return (\r\n    <div className=\"space-y-4 p-4\">\r\n      <div className=\"flex gap-2 p-3 bg-gray-50 rounded-lg\">\r\n        <Skeleton className=\"h-8 w-24\" />\r\n        <Skeleton className=\"h-8 w-32\" />\r\n        <Skeleton className=\"h-8 w-24\" />\r\n      </div>\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow>\r\n            <TableHead className=\"w-12\">선택</TableHead>\r\n            <TableHead>쿼리</TableHead>\r\n            <TableHead className=\"text-center w-24\">문서수</TableHead>\r\n            <TableHead className=\"text-center w-16\">정답</TableHead>\r\n            <TableHead className=\"text-center w-16\">오답</TableHead>\r\n            <TableHead className=\"text-center w-20\">미지정</TableHead>\r\n            <TableHead className=\"text-center w-24\">액션</TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {Array.from({ length: 5 }).map((_, i) => (\r\n            <TableRow key={i}>\r\n              <TableCell><Skeleton className=\"h-4 w-4\" /></TableCell>\r\n              <TableCell><Skeleton className=\"h-4 w-48\" /></TableCell>\r\n              <TableCell><Skeleton className=\"h-6 w-12 mx-auto\" /></TableCell>\r\n              <TableCell><Skeleton className=\"h-6 w-8 mx-auto\" /></TableCell>\r\n              <TableCell><Skeleton className=\"h-6 w-8 mx-auto\" /></TableCell>\r\n              <TableCell><Skeleton className=\"h-6 w-8 mx-auto\" /></TableCell>\r\n              <TableCell><Skeleton className=\"h-6 w-16 mx-auto\" /></TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  )\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\QueryTableRow.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\components\\ReportDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":162,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":162,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6404,6407],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6404,6407],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":68,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":71,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6805,6808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6805,6808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":278,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":278,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12739,12742],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12739,12742],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":311,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":311,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14925,14928],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14925,14928],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\"\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Badge } from \"@/components/ui/badge\"\r\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\r\nimport { BarChart3, CheckCircle } from \"lucide-react\"\r\nimport { useEvaluationReports } from \"@/hooks/use-evaluation\"\r\nimport type { EvaluationReport } from \"@/services\"\r\n\r\ninterface ReportDialogProps {\r\n  open: boolean\r\n  onOpenChange: (open: boolean) => void\r\n  onEvaluate: (data: { reportName: string }) => Promise<EvaluationReport>\r\n  isLoading: boolean\r\n}\r\n\r\nexport function ReportDialog({\r\n  open,\r\n  onOpenChange,\r\n  onEvaluate,\r\n  isLoading\r\n}: ReportDialogProps) {\r\n  const [reportName, setReportName] = useState(\"\")\r\n  const [latestReport, setLatestReport] = useState<EvaluationReport | null>(null)\r\n  const [selectedReport, setSelectedReport] = useState<EvaluationReport | null>(null)\r\n  \r\n  // 기존 리포트 목록 조회\r\n  const reportsQuery = useEvaluationReports()\r\n\r\n  const handleEvaluate = async () => {\r\n    if (!reportName.trim()) {\r\n      alert('리포트 이름을 입력해주세요.')\r\n      return\r\n    }\r\n\r\n    try {\r\n      const report = await onEvaluate({ reportName: reportName.trim() })\r\n      setLatestReport(report)\r\n      setReportName(\"\")\r\n    } catch (error) {\r\n      alert('평가 실행 실패: ' + (error as Error).message)\r\n    }\r\n  }\r\n\r\n  const getScoreColor = (score: number) => {\r\n    if (score >= 0.8) return \"text-green-600\"\r\n    if (score >= 0.6) return \"text-yellow-600\"\r\n    return \"text-red-600\"\r\n  }\r\n\r\n  const getScoreBadgeVariant = (score: number) => {\r\n    if (score >= 0.8) return \"default\"\r\n    if (score >= 0.6) return \"secondary\"\r\n    return \"destructive\"\r\n  }\r\n\r\n  return (\r\n    <Dialog open={open} onOpenChange={onOpenChange}>\r\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <BarChart3 className=\"h-5 w-5\" />\r\n            검색 평가 실행\r\n          </DialogTitle>\r\n        </DialogHeader>\r\n        \r\n        <div className=\"space-y-6\">\r\n          {/* 새 평가 실행 */}\r\n          <Card>\r\n            <CardHeader>\r\n              <CardTitle className=\"text-lg\">새 평가 실행</CardTitle>\r\n            </CardHeader>\r\n            <CardContent className=\"space-y-4\">\r\n              <div>\r\n                <label className=\"text-sm font-medium\">리포트 이름</label>\r\n                <Input\r\n                  value={reportName}\r\n                  onChange={(e) => setReportName(e.target.value)}\r\n                  placeholder=\"예: 2024-01-15 검색 성능 평가\"\r\n                />\r\n              </div>\r\n              \r\n              <Button \r\n                onClick={handleEvaluate}\r\n                disabled={isLoading || !reportName.trim()}\r\n                className=\"w-full\"\r\n              >\r\n                {isLoading ? (\r\n                  <>\r\n                    <div className=\"animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent mr-2\"></div>\r\n                    평가 실행 중...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <BarChart3 className=\"h-4 w-4 mr-2\" />\r\n                    평가 실행\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* 최신 평가 결과 */}\r\n          {latestReport && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-lg flex items-center gap-2\">\r\n                  <CheckCircle className=\"h-5 w-5 text-green-600\" />\r\n                  최신 평가 결과\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n                  <div className=\"text-center\">\r\n                    <div className={`text-2xl font-bold ${getScoreColor(latestReport.averagePrecision)}`}>\r\n                      {(latestReport.averagePrecision * 100).toFixed(1)}%\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-600\">평균 Precision</div>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-center\">\r\n                    <div className={`text-2xl font-bold ${getScoreColor(latestReport.averageRecall)}`}>\r\n                      {(latestReport.averageRecall * 100).toFixed(1)}%\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-600\">평균 Recall</div>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-center\">\r\n                    <div className={`text-2xl font-bold ${getScoreColor(latestReport.averageF1Score)}`}>\r\n                      {(latestReport.averageF1Score * 100).toFixed(1)}%\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-600\">평균 F1 Score</div>\r\n                  </div>\r\n                  \r\n                  <div className=\"text-center\">\r\n                    <div className=\"text-2xl font-bold text-blue-600\">\r\n                      {latestReport.totalQueries}\r\n                    </div>\r\n                    <div className=\"text-sm text-gray-600\">총 쿼리 수</div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-3 gap-4 text-sm\">\r\n                  <div className=\"text-center p-3 bg-gray-50 rounded\">\r\n                    <div className=\"font-medium text-gray-700\">{latestReport.totalRelevantDocuments}</div>\r\n                    <div className=\"text-gray-600\">관련 문서</div>\r\n                  </div>\r\n                  <div className=\"text-center p-3 bg-gray-50 rounded\">\r\n                    <div className=\"font-medium text-gray-700\">{latestReport.totalRetrievedDocuments}</div>\r\n                    <div className=\"text-gray-600\">검색 문서</div>\r\n                  </div>\r\n                  <div className=\"text-center p-3 bg-gray-50 rounded\">\r\n                    <div className=\"font-medium text-gray-700\">{latestReport.totalCorrectDocuments}</div>\r\n                    <div className=\"text-gray-600\">정확 문서</div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* 쿼리별 상세 결과 (처음 5개만) */}\r\n                {(() => {\r\n                  try {\r\n                    const queryDetails = (latestReport as any).queryDetails || []\r\n                    if (Array.isArray(queryDetails) && queryDetails.length > 0) {\r\n                      return (\r\n                        <div>\r\n                          <h4 className=\"font-medium mb-2\">쿼리별 상세 결과 (상위 5개)</h4>\r\n                          <div className=\"space-y-2 max-h-48 overflow-y-auto\">\r\n                            {queryDetails.slice(0, 5).map((detail: any, index: number) => (\r\n                              <div key={index} className=\"p-3 border rounded text-sm\">\r\n                                <div className=\"flex justify-between items-center mb-2\">\r\n                                  <span className=\"font-medium\">{detail.query}</span>\r\n                                  <Badge variant={getScoreBadgeVariant(detail.f1Score)}>\r\n                                    F1: {(detail.f1Score * 100).toFixed(1)}%\r\n                                  </Badge>\r\n                                </div>\r\n                                <div className=\"grid grid-cols-3 gap-2 text-xs text-gray-600\">\r\n                                  <span>Precision: {(detail.precision * 100).toFixed(1)}%</span>\r\n                                  <span>Recall: {(detail.recall * 100).toFixed(1)}%</span>\r\n                                  <span>정확: {detail.correctCount}/{detail.retrievedCount}</span>\r\n                                </div>\r\n                                {/* 누락/오답 문서 표시 */}\r\n                                {(detail.missingDocuments?.length > 0 || detail.wrongDocuments?.length > 0) && (\r\n                                  <div className=\"mt-2 pt-2 border-t space-y-1\">\r\n                                    {detail.missingDocuments?.length > 0 && (\r\n                                      <div className=\"text-xs\">\r\n                                        <span className=\"text-red-600 font-medium\">누락 문서:</span>\r\n                                        <span className=\"ml-1 text-gray-600\">\r\n                                          {detail.missingDocuments.slice(0, 3).join(', ')}\r\n                                          {detail.missingDocuments.length > 3 && ` 외 ${detail.missingDocuments.length - 3}개`}\r\n                                        </span>\r\n                                      </div>\r\n                                    )}\r\n                                    {detail.wrongDocuments?.length > 0 && (\r\n                                      <div className=\"text-xs\">\r\n                                        <span className=\"text-orange-600 font-medium\">오답 문서:</span>\r\n                                        <span className=\"ml-1 text-gray-600\">\r\n                                          {detail.wrongDocuments.slice(0, 3).join(', ')}\r\n                                          {detail.wrongDocuments.length > 3 && ` 외 ${detail.wrongDocuments.length - 3}개`}\r\n                                        </span>\r\n                                      </div>\r\n                                    )}\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      )\r\n                    }\r\n                  } catch (error) {\r\n                    console.error('queryDetails 처리 오류:', error)\r\n                  }\r\n                  return null\r\n                })()}\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n\r\n          {/* 기존 리포트 목록 */}\r\n          {reportsQuery.data && reportsQuery.data.length > 0 && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-lg\">기존 평가 리포트</CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"space-y-2 max-h-64 overflow-y-auto\">\r\n                  {reportsQuery.data.map((report) => (\r\n                    <div \r\n                      key={report.id} \r\n                      className={`p-3 border rounded cursor-pointer transition-colors hover:bg-gray-50 ${\r\n                        selectedReport?.id === report.id ? 'bg-blue-50 border-blue-200' : ''\r\n                      }`}\r\n                      onClick={() => setSelectedReport(selectedReport?.id === report.id ? null : report)}\r\n                    >\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <div>\r\n                          <div className=\"font-medium\">{report.reportName}</div>\r\n                          <div className=\"text-sm text-gray-600\">\r\n                            {new Date(report.createdAt).toLocaleString('ko-KR')}\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"text-right\">\r\n                          <div className=\"flex gap-2\">\r\n                            <Badge variant=\"outline\" className=\"text-xs\">\r\n                              P: {(report.averagePrecision * 100).toFixed(1)}%\r\n                            </Badge>\r\n                            <Badge variant=\"outline\" className=\"text-xs\">\r\n                              R: {(report.averageRecall * 100).toFixed(1)}%\r\n                            </Badge>\r\n                            <Badge variant={getScoreBadgeVariant(report.averageF1Score)} className=\"text-xs\">\r\n                              F1: {(report.averageF1Score * 100).toFixed(1)}%\r\n                            </Badge>\r\n                          </div>\r\n                          <div className=\"text-xs text-gray-500 mt-1\">\r\n                            {report.totalQueries}개 쿼리 • 클릭하여 상세보기\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n\r\n          {/* 선택된 리포트 상세 결과 */}\r\n          {selectedReport && (\r\n            <Card>\r\n              <CardHeader>\r\n                <CardTitle className=\"text-lg flex items-center gap-2\">\r\n                  <BarChart3 className=\"h-5 w-5 text-blue-600\" />\r\n                  {selectedReport.reportName} - 상세 결과\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                {(() => {\r\n                  try {\r\n                    const queryDetails = (selectedReport as any).queryDetails || []\r\n                    if (Array.isArray(queryDetails) && queryDetails.length > 0) {\r\n                      return (\r\n                        <div className=\"space-y-3\">\r\n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 p-4 bg-gray-50 rounded\">\r\n                            <div className=\"text-center\">\r\n                              <div className={`text-xl font-bold ${getScoreColor(selectedReport.averagePrecision)}`}>\r\n                                {(selectedReport.averagePrecision * 100).toFixed(1)}%\r\n                              </div>\r\n                              <div className=\"text-sm text-gray-600\">평균 Precision</div>\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                              <div className={`text-xl font-bold ${getScoreColor(selectedReport.averageRecall)}`}>\r\n                                {(selectedReport.averageRecall * 100).toFixed(1)}%\r\n                              </div>\r\n                              <div className=\"text-sm text-gray-600\">평균 Recall</div>\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                              <div className={`text-xl font-bold ${getScoreColor(selectedReport.averageF1Score)}`}>\r\n                                {(selectedReport.averageF1Score * 100).toFixed(1)}%\r\n                              </div>\r\n                              <div className=\"text-sm text-gray-600\">평균 F1 Score</div>\r\n                            </div>\r\n                            <div className=\"text-center\">\r\n                              <div className=\"text-xl font-bold text-blue-600\">\r\n                                {selectedReport.totalQueries}\r\n                              </div>\r\n                              <div className=\"text-sm text-gray-600\">총 쿼리 수</div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"space-y-2 max-h-96 overflow-y-auto\">\r\n                            <h4 className=\"font-medium text-gray-900\">전체 쿼리별 결과</h4>\r\n                            {queryDetails.map((detail: any, index: number) => (\r\n                              <div key={index} className=\"p-3 border rounded text-sm bg-white\">\r\n                                <div className=\"flex justify-between items-center mb-2\">\r\n                                  <span className=\"font-medium\">{detail.query}</span>\r\n                                  <div className=\"flex gap-2\">\r\n                                    <Badge variant=\"outline\" className=\"text-xs\">\r\n                                      P: {(detail.precision * 100).toFixed(1)}%\r\n                                    </Badge>\r\n                                    <Badge variant=\"outline\" className=\"text-xs\">\r\n                                      R: {(detail.recall * 100).toFixed(1)}%\r\n                                    </Badge>\r\n                                    <Badge variant={getScoreBadgeVariant(detail.f1Score)} className=\"text-xs\">\r\n                                      F1: {(detail.f1Score * 100).toFixed(1)}%\r\n                                    </Badge>\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"grid grid-cols-3 gap-4 text-xs text-gray-600 mb-2\">\r\n                                  <span>관련: {detail.relevantCount}개</span>\r\n                                  <span>검색: {detail.retrievedCount}개</span>\r\n                                  <span>정확: {detail.correctCount}개</span>\r\n                                </div>\r\n                                {/* 누락/오답 문서 표시 */}\r\n                                {(detail.missingDocuments?.length > 0 || detail.wrongDocuments?.length > 0) && (\r\n                                  <div className=\"mt-2 pt-2 border-t space-y-1\">\r\n                                    {detail.missingDocuments?.length > 0 && (\r\n                                      <div className=\"text-xs\">\r\n                                        <span className=\"text-red-600 font-medium\">누락 문서 ({detail.missingDocuments.length}개):</span>\r\n                                        <span className=\"ml-1 text-gray-600\">\r\n                                          {detail.missingDocuments.slice(0, 5).join(', ')}\r\n                                          {detail.missingDocuments.length > 5 && ` 외 ${detail.missingDocuments.length - 5}개`}\r\n                                        </span>\r\n                                      </div>\r\n                                    )}\r\n                                    {detail.wrongDocuments?.length > 0 && (\r\n                                      <div className=\"text-xs\">\r\n                                        <span className=\"text-orange-600 font-medium\">오답 문서 ({detail.wrongDocuments.length}개):</span>\r\n                                        <span className=\"ml-1 text-gray-600\">\r\n                                          {detail.wrongDocuments.slice(0, 5).join(', ')}\r\n                                          {detail.wrongDocuments.length > 5 && ` 외 ${detail.wrongDocuments.length - 5}개`}\r\n                                        </span>\r\n                                      </div>\r\n                                    )}\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </div>\r\n                      )\r\n                    }\r\n                  } catch (error) {\r\n                    console.error('queryDetails 처리 오류:', error)\r\n                    return (\r\n                      <div className=\"text-center py-8 text-gray-500\">\r\n                        <p>상세 결과를 불러올 수 없습니다.</p>\r\n                        <p className=\"text-xs mt-1\">데이터 형식 오류가 발생했습니다.</p>\r\n                      </div>\r\n                    )\r\n                  }\r\n                  return (\r\n                    <div className=\"text-center py-8 text-gray-500\">\r\n                      <p>상세 결과가 없습니다.</p>\r\n                    </div>\r\n                  )\r\n                })()}\r\n              </CardContent>\r\n            </Card>\r\n          )}\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  )\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-evaluation\\execution\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-logs\\components\\SearchLogDetailDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-logs\\components\\SearchLogHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-logs\\components\\SearchLogTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-logs\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PAGINATION' is defined but never used. Allowed unused vars must match /^_/u.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":20},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'fetchItems'. Either include it or remove the dependency array.","line":133,"column":6,"nodeType":"ArrayExpression","endLine":133,"endColumn":48,"suggestions":[{"desc":"Update the dependencies array to be: [page, pageSize, sortField, sortDirection, fetchItems]","fix":{"range":[4634,4676],"text":"[page, pageSize, sortField, sortDirection, fetchItems]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from \"react\"\r\nimport { Card, CardHeader, CardContent } from \"@/components/ui/card\"\r\n// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\"\r\n// 상단 입력 제거되어 미사용 import 삭제\r\nimport { searchLogApi } from \"@/lib/api\"\r\nimport type { \r\n  SearchLogItem, \r\n  SearchLogParams,\r\n  SearchLogSortField, \r\n  SearchLogSortDirection \r\n} from \"@/types/dashboard\"\r\nimport { SearchLogHeader } from \"./components/SearchLogHeader\"\r\nimport { SearchLogTable } from \"./components/SearchLogTable\"\r\nimport { SearchLogDetailDialog } from \"./components/SearchLogDetailDialog\"\r\nimport { getSearchSessionId } from \"@/lib/search-session\"\r\nimport { PaginationControls } from \"@/components/common/PaginationControls\"\r\nimport { DataTableToolbar } from \"@/components/common/DataTableToolbar\"\r\nimport { PAGINATION } from \"@/constants/pagination\"\r\n\r\nexport default function SearchLogs() {\r\n  const [items, setItems] = useState<SearchLogItem[]>([])\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(\"\")\r\n  const [page, setPage] = useState(0)\r\n  const [pageSize, setPageSize] = useState(20)\r\n  const [total, setTotal] = useState(0)\r\n  const [totalPages, setTotalPages] = useState(0)\r\n  const [detailOpen, setDetailOpen] = useState(false)\r\n  const [selectedLogId, setSelectedLogId] = useState<string | null>(null)\r\n  \r\n  // 필터 상태\r\n  const [keyword, setKeyword] = useState(\"\")\r\n  const [isError, setIsError] = useState<boolean | undefined>(undefined)\r\n  const [clientIp, setClientIp] = useState(\"\")\r\n  const [startDate, setStartDate] = useState(\"\")\r\n  const [endDate, setEndDate] = useState(\"\")\r\n  const [minResponseTime, setMinResponseTime] = useState<number | undefined>(undefined)\r\n  const [maxResponseTime, setMaxResponseTime] = useState<number | undefined>(undefined)\r\n  const [minResultCount, setMinResultCount] = useState<number | undefined>(undefined)\r\n  const [maxResultCount, setMaxResultCount] = useState<number | undefined>(undefined)\r\n  \r\n  // 정렬 상태\r\n  const [sortField, setSortField] = useState<SearchLogSortField>('timestamp')\r\n  const [sortDirection, setSortDirection] = useState<SearchLogSortDirection>('desc')\r\n  \r\n\r\n  // 검색 로그 목록 조회\r\n  const fetchItems = async () => {\r\n    setLoading(true)\r\n    setError(\"\")\r\n    try {\r\n      const sessionId = getSearchSessionId()\r\n      const params: SearchLogParams = {\r\n        page, // API는 0부터 시작 (state도 0-base)\r\n        size: pageSize,\r\n        sort: sortField,\r\n        order: sortDirection,\r\n        searchSessionId: sessionId,\r\n        ...(keyword && { keyword }),\r\n        ...(isError !== undefined && { isError }),\r\n        ...(clientIp && { clientIp }),\r\n        ...(startDate && { startDate }),\r\n        ...(endDate && { endDate }),\r\n        ...(minResponseTime !== undefined && { minResponseTime }),\r\n        ...(maxResponseTime !== undefined && { maxResponseTime }),\r\n        ...(minResultCount !== undefined && { minResultCount }),\r\n        ...(maxResultCount !== undefined && { maxResultCount })\r\n      }\r\n      \r\n      const response = await searchLogApi.getList(params)\r\n      setItems(response.content || [])\r\n      setTotal(response.totalElements || 0)\r\n      setTotalPages(response.totalPages || 0)\r\n    } catch (err) {\r\n      console.error('검색 로그 API 에러:', err)\r\n      if (err instanceof Error) {\r\n        if (err.message.includes('500') || err.message.includes('서버 내부 오류')) {\r\n          setError(\"서버에서 일시적인 오류가 발생했습니다. 잠시 후 다시 시도해주세요.\")\r\n        } else {\r\n          setError(err.message)\r\n        }\r\n      } else {\r\n        setError(\"목록 조회 중 오류가 발생했습니다.\")\r\n      }\r\n      setItems([])\r\n      setTotal(0)\r\n      setTotalPages(0)\r\n    } finally {\r\n      setLoading(false)\r\n    }\r\n  }\r\n\r\n  // 정렬 처리\r\n  const handleSort = (field: SearchLogSortField) => {\r\n    if (sortField === field) {\r\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc')\r\n    } else {\r\n      setSortField(field)\r\n      setSortDirection('desc')\r\n    }\r\n    setPage(0)\r\n  }\r\n\r\n  // 검색 실행\r\n  const handleSearch = () => {\r\n    setPage(0)\r\n    fetchItems()\r\n  }\r\n\r\n  // 필터 초기화\r\n  const handleResetFilters = () => {\r\n    setKeyword(\"\")\r\n    setIsError(undefined)\r\n    setClientIp(\"\")\r\n    setStartDate(\"\")\r\n    setEndDate(\"\")\r\n    setMinResponseTime(undefined)\r\n    setMaxResponseTime(undefined)\r\n    setMinResultCount(undefined)\r\n    setMaxResultCount(undefined)\r\n    setPage(0)\r\n  }\r\n\r\n  const handlePageSizeChange = (newPageSize: number) => {\r\n    setPageSize(newPageSize)\r\n    setPage(0) // 페이지 크기 변경시 첫 페이지(0)로 이동\r\n  }\r\n\r\n\r\n  // 페이지, 정렬, 페이지 크기 변경 시에만 목록 재조회\r\n  useEffect(() => {\r\n    fetchItems()\r\n  }, [page, pageSize, sortField, sortDirection])\r\n\r\n  return (\r\n    <div className=\"p-1 space-y-1 bg-gray-50 min-h-screen\">\r\n      <Card className=\"shadow-sm border-gray-200\">\r\n        <CardHeader>\r\n          <SearchLogHeader\r\n            keyword=\"\"\r\n            indexName=\"\"\r\n            isError={isError}\r\n            clientIp={clientIp}\r\n            startDate={startDate}\r\n            endDate={endDate}\r\n            minResponseTime={minResponseTime}\r\n            maxResponseTime={maxResponseTime}\r\n            minResultCount={minResultCount}\r\n            maxResultCount={maxResultCount}\r\n            onKeywordChange={() => {}}\r\n            onIndexNameChange={() => {}}\r\n            onIsErrorChange={setIsError}\r\n            onClientIpChange={setClientIp}\r\n            onStartDateChange={setStartDate}\r\n            onEndDateChange={setEndDate}\r\n            onMinResponseTimeChange={setMinResponseTime}\r\n            onMaxResponseTimeChange={setMaxResponseTime}\r\n            onMinResultCountChange={setMinResultCount}\r\n            onMaxResultCountChange={setMaxResultCount}\r\n            onSearch={handleSearch}\r\n            onResetFilters={handleResetFilters}\r\n            hideKeyword\r\n          />\r\n        </CardHeader>\r\n        <CardContent className=\"px-3\">\r\n          <DataTableToolbar\r\n            showSearch={false}\r\n            totalCount={total}\r\n            currentPage={page}\r\n            totalPages={totalPages}\r\n            pageSize={pageSize}\r\n            onPageSizeChange={handlePageSizeChange}\r\n          />\r\n          {error && (\r\n            <div className=\"text-red-700 text-xs mb-2 p-2 bg-red-50 rounded border border-red-200\">\r\n              {error}\r\n            </div>\r\n          )}\r\n\r\n          {/* 상단 총 건수/페이지, 페이지당 선택 제거 */}\r\n\r\n          {loading ? (\r\n            <div className=\"text-center py-4\">\r\n              <div className=\"inline-flex items-center gap-2 text-xs text-gray-600\">\r\n                <div className=\"animate-spin rounded-full h-3 w-3 border-b-2 border-gray-400\"></div>\r\n                로딩 중...\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <>\r\n              {/* 상단 검색 입력 제거(원래대로) */}\r\n\r\n              <SearchLogTable\r\n                items={items}\r\n                sortField={sortField}\r\n                sortDirection={sortDirection}\r\n                onSort={handleSort}\r\n                onRowClick={(item) => { setSelectedLogId(item.id); setDetailOpen(true) }}\r\n              />\r\n\r\n              {items.length === 0 && (\r\n                <div className=\"text-center py-4 text-gray-500\">\r\n                  <div className=\"mb-1 text-xs\">검색 결과가 없습니다</div>\r\n                  <div className=\"text-xs text-gray-400\">필터 조건을 변경해서 다시 검색해보세요</div>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"mt-3 pt-2 border-t border-gray-100\">\r\n                <PaginationControls\r\n                  currentPage={page}\r\n                  totalPages={totalPages}\r\n                  totalCount={total}\r\n                  pageSize={pageSize}\r\n                  onPageChange={(p) => setPage(p)}\r\n                  onPageSizeChange={(ps) => { handlePageSizeChange(ps) }}\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n      <SearchLogDetailDialog logId={selectedLogId} open={detailOpen} onOpenChange={setDetailOpen} />\r\n    </div>\r\n  )\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-simulator\\autocomplete\\page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-simulator\\components\\LoadQueryDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-simulator\\components\\QueryInput.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-simulator\\components\\ResultsTable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-simulator\\components\\SaveQueryDialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-simulator\\components\\ScoreProductList.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-simulator\\components\\SearchResults.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-simulator\\page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1235,1238],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1235,1238],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3307,3310],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3307,3310],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState } from \"react\"\r\nimport { apiClient } from \"@/services/common/api-client\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport { Search } from \"lucide-react\"\r\nimport { ProductFilters } from \"../search-demo/components/ProductFilters\"\r\nimport { ScoreProductList } from \"./components/ScoreProductList\"\r\nimport { EnvironmentSelector } from \"../dictionary/user/components/EnvironmentSelector\"\r\nimport { DictionaryEnvironmentType } from \"@/types/dashboard\"\r\nimport type { Product, AggregationBucket } from \"@/lib/api\"\r\n\r\n// 새로운 시뮬레이션 API 응답 타입\r\ninterface ExplainDetail {\r\n    value: number\r\n    description: string\r\n    details?: ExplainDetail[]\r\n}\r\n\r\ninterface SimulationSearchResponse {\r\n    hits: {\r\n        total: number\r\n        data: Array<{\r\n            id: string\r\n            score: number\r\n            explain?: ExplainDetail\r\n            name: string\r\n            nameRaw?: string\r\n            brand: string\r\n            category: string\r\n            price: number\r\n            description: string\r\n            reviewCount?: number\r\n            rating?: number\r\n            thumbnailUrl?: string\r\n            registeredMonth?: string\r\n            [key: string]: any\r\n        }>\r\n    }\r\n    aggregations?: {\r\n        brand_name?: AggregationBucket[]\r\n        category_name?: AggregationBucket[]\r\n    }\r\n    meta: {\r\n        page: number\r\n        size: number\r\n        totalPages: number\r\n        processingTime: number\r\n    }\r\n}\r\n\r\n// 환경 매핑 (사전관리와 통일)\r\nconst ENV_MAPPING: Record<DictionaryEnvironmentType, string> = {\r\n    [DictionaryEnvironmentType.CURRENT]: 'DEV', // 현재 = 개발환경\r\n    [DictionaryEnvironmentType.DEV]: 'DEV',\r\n    [DictionaryEnvironmentType.PROD]: 'PROD'\r\n}\r\n\r\ninterface EnvironmentState {\r\n    // 검색 조건\r\n    query: string\r\n    brand: string[]\r\n    category: string[]\r\n    price: { from: string; to: string }\r\n    page: number\r\n    sort: string\r\n    showExplain: boolean\r\n    applyTypoCorrection: boolean  // 🆕 오타교정 옵션 추가\r\n    \r\n    // 결과 데이터\r\n    products: (Product & { score?: number; explain?: ExplainDetail })[]\r\n    totalResults: number\r\n    totalPages: number\r\n    brandAgg: AggregationBucket[]\r\n    categoryAgg: AggregationBucket[]\r\n    baseBrandAgg: AggregationBucket[]\r\n    baseCategoryAgg: AggregationBucket[]\r\n    \r\n    // 상태\r\n    loading: boolean\r\n    error: string\r\n    hasSearched: boolean\r\n    lastSearchTime?: number\r\n}\r\n\r\nconst initialEnvironmentState: EnvironmentState = {\r\n    query: '',\r\n    brand: [],\r\n    category: [],\r\n    price: { from: '', to: '' },\r\n    page: 0,\r\n    sort: 'score',\r\n    showExplain: false,\r\n    applyTypoCorrection: true,  // 🆕 기본값 true\r\n    products: [],\r\n    totalResults: 0,\r\n    totalPages: 0,\r\n    brandAgg: [],\r\n    categoryAgg: [],\r\n    baseBrandAgg: [],\r\n    baseCategoryAgg: [],\r\n    loading: false,\r\n    error: '',\r\n    hasSearched: false\r\n}\r\n\r\nexport default function SearchSimulator() {\r\n    const [selectedEnv, setSelectedEnv] = useState<DictionaryEnvironmentType>(DictionaryEnvironmentType.DEV)\r\n    const [environments, setEnvironments] = useState<Record<string, EnvironmentState>>({\r\n        DEV: { ...initialEnvironmentState },\r\n        PROD: { ...initialEnvironmentState }\r\n    })\r\n\r\n    // API 응답을 Product 타입으로 변환\r\n    const transformToProduct = (item: any): Product & { score?: number; explain?: ExplainDetail } => {\r\n        const product = {\r\n            id: item.id || String(Math.floor(Math.random() * 1000000)),\r\n            name: item.name || '',\r\n            nameRaw: item.nameRaw || item.name || '',\r\n            model: item.model || [],\r\n            brand: item.brand || '',\r\n            categoryName: item.categoryName || item.category || '',\r\n            price: item.price || 0,\r\n            reviewCount: item.reviewCount || Math.floor(Math.random() * 1000),\r\n            rating: item.rating || 4.5,\r\n            thumbnailUrl: item.thumbnailUrl || `https://picsum.photos/200?random=${item.id}`,\r\n            specs: item.specs || item.description || '',\r\n            specsRaw: item.specsRaw || item.descriptionRaw || item.description || '',\r\n            registeredMonth: item.registeredMonth || '2024-01',\r\n            score: item.score,\r\n            explain: item.explain\r\n        }\r\n        \r\n        // explain 데이터 디버깅\r\n        if (item.explain) {\r\n            // Product explain data\r\n        }\r\n        \r\n        return product\r\n    }\r\n\r\n    // 검색 실행\r\n    const performSearch = async (envId: string, isInitialSearch = false, overrideParams?: Partial<EnvironmentState>) => {\r\n        // 현재 환경 상태 가져오기\r\n        const currentEnv = environments[envId]\r\n        \r\n        if (!currentEnv.query.trim() && isInitialSearch) {\r\n            return\r\n        }\r\n\r\n        // 검색에 사용할 파라미터 (override 값이 있으면 적용)\r\n        const searchParams = {\r\n            query: overrideParams?.query ?? currentEnv.query,\r\n            brand: overrideParams?.brand ?? currentEnv.brand,\r\n            category: overrideParams?.category ?? currentEnv.category,\r\n            price: overrideParams?.price ?? currentEnv.price,\r\n            page: overrideParams?.page ?? currentEnv.page,\r\n            sort: overrideParams?.sort ?? currentEnv.sort,\r\n            showExplain: overrideParams?.showExplain ?? currentEnv.showExplain,\r\n            applyTypoCorrection: overrideParams?.applyTypoCorrection ?? currentEnv.applyTypoCorrection  // 🆕 오타교정 옵션\r\n        }\r\n\r\n        // 로딩 상태 설정\r\n        setEnvironments(prev => ({\r\n            ...prev,\r\n            [envId]: { \r\n                ...prev[envId], \r\n                loading: true, \r\n                error: '',\r\n                hasSearched: true\r\n            }\r\n        }))\r\n\r\n        const startTime = Date.now()\r\n\r\n        try {\r\n            // Query Parameters 구성\r\n            const params = new URLSearchParams()\r\n            \r\n            // 필수 파라미터\r\n            params.append('environmentType', envId)\r\n            params.append('query', searchParams.query.trim())\r\n            params.append('page', searchParams.page.toString())\r\n            params.append('size', '10')\r\n            \r\n            // 선택적 파라미터\r\n            if (searchParams.showExplain) {\r\n                params.append('explain', 'true')\r\n            }\r\n\r\n            // 🆕 오타교정 옵션 추가\r\n            params.append('applyTypoCorrection', searchParams.applyTypoCorrection.toString())\r\n\r\n            // 정렬 설정\r\n            let sortField = 'score'\r\n            let sortOrder: 'asc' | 'desc' = 'desc'\r\n\r\n            if (searchParams.sort === 'price_asc') {\r\n                sortField = 'price'\r\n                sortOrder = 'asc'\r\n            } else if (searchParams.sort === 'price_desc') {\r\n                sortField = 'price'\r\n                sortOrder = 'desc'\r\n            } else if (searchParams.sort === 'reviewCount') {\r\n                sortField = 'reviewCount'\r\n                sortOrder = 'desc'\r\n            } else if (searchParams.sort === 'registeredMonth') {\r\n                sortField = 'registeredMonth'\r\n                sortOrder = 'desc'\r\n            }\r\n\r\n            if (sortField !== 'score') {\r\n                params.append('sortField', sortField)\r\n                params.append('sortOrder', sortOrder)\r\n            }\r\n\r\n            // 필터 조건 추가\r\n            if (searchParams.brand.length > 0) {\r\n                searchParams.brand.forEach((b: string) => params.append('brand', b))\r\n            }\r\n            \r\n            if (searchParams.category.length > 0) {\r\n                searchParams.category.forEach((c: string) => params.append('category', c))\r\n            }\r\n            \r\n            if (searchParams.price.from) {\r\n                params.append('priceFrom', searchParams.price.from)\r\n            }\r\n            \r\n            if (searchParams.price.to) {\r\n                params.append('priceTo', searchParams.price.to)\r\n            }\r\n\r\n            const response = await apiClient.get<SimulationSearchResponse>('/v1/search/simulation', Object.fromEntries(params))\r\n\r\n            const endTime = Date.now()\r\n\r\n            // API 응답 디버깅\r\n            // Search API response\r\n            if (response.hits?.data?.length > 0) {\r\n                // First product data\r\n                if (response.hits.data[0].explain) {\r\n                    // Explain data\r\n                }\r\n            }\r\n\r\n            // 상품 데이터 변환\r\n            const products = response.hits?.data?.map(transformToProduct) || []\r\n\r\n            setEnvironments(prev => ({\r\n                ...prev,\r\n                [envId]: {\r\n                    ...prev[envId],\r\n                    products,\r\n                    totalResults: response.hits?.total || 0,\r\n                    totalPages: response.meta?.totalPages || 0,\r\n                    loading: false,\r\n                    lastSearchTime: endTime - startTime,\r\n                    // 초기 검색 시에만 aggregation 업데이트 (그룹 필터용)\r\n                    ...(isInitialSearch && {\r\n                        brandAgg: response.aggregations?.brand_name || [],\r\n                        categoryAgg: response.aggregations?.category_name || [],\r\n                        baseBrandAgg: response.aggregations?.brand_name || [],\r\n                        baseCategoryAgg: response.aggregations?.category_name || []\r\n                    })\r\n                }\r\n            }))\r\n\r\n        } catch (err) {\r\n            setEnvironments(prev => ({\r\n                ...prev,\r\n                [envId]: {\r\n                    ...prev[envId],\r\n                    error: err instanceof Error ? err.message : \"검색 실패\",\r\n                    loading: false\r\n                }\r\n            }))\r\n        }\r\n    }\r\n\r\n    // 환경별 상태 업데이트\r\n    const updateEnvironmentState = (envId: string, updates: Partial<EnvironmentState>) => {\r\n        setEnvironments(prev => ({\r\n            ...prev,\r\n            [envId]: { ...prev[envId], ...updates }\r\n        }))\r\n    }\r\n\r\n    // 검색 실행\r\n    const handleSearch = (envId: string, query: string) => {\r\n        // 새로운 검색어로 검색 시 필터 초기화\r\n        updateEnvironmentState(envId, {\r\n            query,\r\n            brand: [],\r\n            category: [],\r\n            price: { from: '', to: '' },\r\n            page: 0\r\n        })\r\n        \r\n        setTimeout(() => performSearch(envId, true), 100)\r\n    }\r\n\r\n    // 필터 초기화\r\n    const resetFilters = (envId: string) => {\r\n        const resetParams = {\r\n            brand: [],\r\n            category: [],\r\n            price: { from: '', to: '' },\r\n            page: 0\r\n        }\r\n        updateEnvironmentState(envId, resetParams)\r\n        performSearch(envId, false, resetParams)\r\n    }\r\n\r\n    // 가격 검색\r\n    const handlePriceSearch = (envId: string) => {\r\n        updateEnvironmentState(envId, { page: 0 })\r\n        performSearch(envId, false, { page: 0 })\r\n    }\r\n\r\n    const currentEnvId = ENV_MAPPING[selectedEnv]\r\n    const envState = environments[currentEnvId]\r\n\r\n    return (\r\n        <div className=\"p-6\">\r\n            <div className=\"space-y-4\">\r\n                {/* 검색창 */}\r\n                <div className=\"space-y-3\">\r\n                    {/* 환경 선택 */}\r\n                    <div className=\"flex justify-start\">\r\n                        <EnvironmentSelector\r\n                            value={selectedEnv}\r\n                            onChange={setSelectedEnv}\r\n                        />\r\n                    </div>\r\n                    <div className=\"flex gap-2\">\r\n                                <Input\r\n                                    value={envState.query}\r\n                                    onChange={(e) => updateEnvironmentState(selectedEnv, { query: e.target.value })}\r\n                                    placeholder=\"검색할 키워드를 입력하세요\"\r\n                                    onKeyPress={(e) => {\r\n                                        if (e.key === 'Enter') {\r\n                                            handleSearch(selectedEnv, envState.query)\r\n                                        }\r\n                                    }}\r\n                                    className=\"flex-1 max-w-md h-9\"\r\n                                />\r\n                                <Button\r\n                                    onClick={() => handleSearch(currentEnvId, envState.query)}\r\n                                    disabled={envState.loading}\r\n                                    className={`px-4 h-9 ${selectedEnv === DictionaryEnvironmentType.PROD ? 'bg-gray-800' : 'bg-blue-600'} hover:opacity-90`}\r\n                                >\r\n                                    {envState.loading ? (\r\n                                        <div className=\"w-3 h-3 border-2 border-white border-t-transparent rounded-full animate-spin\" />\r\n                                    ) : (\r\n                                        <Search className=\"h-4 w-4\" />\r\n                                    )}\r\n                                </Button>\r\n                            </div>\r\n                            \r\n                    {/* 검색 옵션들 */}\r\n                    <div className=\"flex items-center gap-4\">\r\n                        <label className=\"flex items-center gap-2 text-sm\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        checked={envState.showExplain}\r\n                                        onChange={(e) => updateEnvironmentState(selectedEnv, { showExplain: e.target.checked })}\r\n                                        className=\"rounded w-4 h-4\"\r\n                                    />\r\n                                    <span>Explain 포함</span>\r\n                                </label>\r\n                                \r\n                        {/* 오타교정 옵션 */}\r\n                        <label className=\"flex items-center gap-2 text-sm\">\r\n                                    <input\r\n                                        type=\"checkbox\"\r\n                                        checked={envState.applyTypoCorrection}\r\n                                        onChange={(e) => updateEnvironmentState(currentEnvId, { applyTypoCorrection: e.target.checked })}\r\n                                        className=\"rounded w-4 h-4\"\r\n                                    />\r\n                                    <span>오타 자동교정</span>\r\n                                </label>\r\n                            </div>\r\n\r\n                    {/* 에러 메시지 */}\r\n                    {envState.error && (\r\n                        <div className=\"text-red-600 text-sm p-3 bg-red-50 rounded border border-red-200\">\r\n                            {envState.error}\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                {/* 필터 */}\r\n                <div>\r\n                    <ProductFilters\r\n                            category={envState.category}\r\n                            setCategory={(category) => {\r\n                                if (typeof category === 'function') {\r\n                                    const newCategory = category(envState.category)\r\n                                    updateEnvironmentState(currentEnvId, { category: newCategory, page: 0 })\r\n                                    performSearch(currentEnvId, false, { category: newCategory, page: 0 })\r\n                                } else {\r\n                                    updateEnvironmentState(currentEnvId, { category, page: 0 })\r\n                                    performSearch(currentEnvId, false, { category, page: 0 })\r\n                                }\r\n                            }}\r\n                            categorySub={[]}\r\n                            setCategorySub={() => {}}\r\n                            brand={envState.brand}\r\n                            setBrand={(brand) => {\r\n                                if (typeof brand === 'function') {\r\n                                    const newBrand = brand(envState.brand)\r\n                                    updateEnvironmentState(currentEnvId, { brand: newBrand, page: 0 })\r\n                                    performSearch(currentEnvId, false, { brand: newBrand, page: 0 })\r\n                                } else {\r\n                                    updateEnvironmentState(currentEnvId, { brand, page: 0 })\r\n                                    performSearch(currentEnvId, false, { brand, page: 0 })\r\n                                }\r\n                            }}\r\n                            price={envState.price}\r\n                            setPrice={(price) => {\r\n                                if (typeof price === 'function') {\r\n                                    const newPrice = price(envState.price)\r\n                                    updateEnvironmentState(currentEnvId, { price: newPrice })\r\n                                } else {\r\n                                    updateEnvironmentState(currentEnvId, { price })\r\n                                }\r\n                            }}\r\n                            brandAgg={envState.baseBrandAgg}\r\n                            categoryAgg={envState.baseCategoryAgg}\r\n                            onResetFilters={() => resetFilters(currentEnvId)}\r\n                            onPriceSearch={() => handlePriceSearch(currentEnvId)}\r\n                        />\r\n                </div>\r\n\r\n                {/* 상품 목록 */}\r\n                {envState.hasSearched && (\r\n                    <ScoreProductList\r\n                        products={envState.products}\r\n                        loading={envState.loading}\r\n                        totalResults={envState.totalResults}\r\n                        totalPages={envState.totalPages}\r\n                        page={envState.page}\r\n                        setPage={(page: number) => {\r\n                            updateEnvironmentState(currentEnvId, { page })\r\n                            performSearch(currentEnvId, false, { page })\r\n                        }}\r\n                        sort={envState.sort}\r\n                        onSortChange={(sort: string) => {\r\n                            updateEnvironmentState(currentEnvId, { sort, page: 0 })\r\n                            performSearch(currentEnvId, false, { sort, page: 0 })\r\n                        }}\r\n                        searchQuery={envState.query}\r\n                        showExplain={envState.showExplain}\r\n                    />\r\n                )}\r\n        </div>\r\n    </div>\r\n    )\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\app\\search-simulator\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\components\\common\\DataTableToolbar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\components\\common\\PaginationControls.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\components\\dictionary\\common\\DictionaryPagination.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startIndex' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":21,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'endIndex' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":22,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":22,"endColumn":17}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Button } from \"@/components/ui/button\"\r\nimport { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight } from \"lucide-react\"\r\n\r\ninterface DictionaryPaginationProps {\r\n  currentPage: number // 1-based (레거시 컴포넌트)\r\n  totalPages: number\r\n  itemsPerPage: number\r\n  totalItems: number\r\n  onPageChange: (page: number) => void // expects 1-based\r\n  onItemsPerPageChange: (items: number) => void\r\n}\r\n\r\nexport function DictionaryPagination({\r\n  currentPage,\r\n  totalPages,\r\n  itemsPerPage: _itemsPerPage,\r\n  totalItems: _totalItems,\r\n  onPageChange,\r\n  onItemsPerPageChange: _onItemsPerPageChange\r\n}: DictionaryPaginationProps) {\r\n  const startIndex = 0\r\n  const endIndex = 0\r\n  \r\n  // 최대 10개의 페이지 번호 표시\r\n  const maxVisiblePages = 10\r\n  const halfWindow = Math.floor(maxVisiblePages / 2)\r\n  let startPage = Math.max(1, currentPage - halfWindow)\r\n  const endPage = Math.min(totalPages, startPage + maxVisiblePages - 1)\r\n  \r\n  if (endPage - startPage + 1 < maxVisiblePages) {\r\n    startPage = Math.max(1, endPage - maxVisiblePages + 1)\r\n  }\r\n\r\n  const renderPageNumbers = () => {\r\n    const pages = []\r\n    \r\n    // 중간 페이지들만 표시 (최대 10개)\r\n    for (let i = startPage; i <= endPage; i++) {\r\n      pages.push(\r\n        <Button \r\n          key={i}\r\n          variant={i === currentPage ? \"default\" : \"outline\"}\r\n          size=\"sm\"\r\n          onClick={() => onPageChange(i)}\r\n          className=\"h-7 px-2 min-w-[28px] border-gray-300\"\r\n        >\r\n          {i}\r\n        </Button>\r\n      )\r\n    }\r\n\r\n    return pages\r\n  }\r\n\r\n  return (\r\n    <div className=\"flex items-center justify-between mt-4\">\r\n      <div className=\"flex items-center gap-2\">\r\n        <div className=\"flex items-center gap-1\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => onPageChange(1)}\r\n            disabled={currentPage === 1}\r\n            className=\"h-7 px-2 border-gray-300\"\r\n            title=\"처음 페이지\"\r\n          >\r\n            <ChevronsLeft className=\"h-3 w-3\" />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => onPageChange(currentPage - 1)}\r\n            disabled={currentPage === 1}\r\n            className=\"h-7 px-2 border-gray-300\"\r\n            title=\"이전 페이지\"\r\n          >\r\n            <ChevronLeft className=\"h-3 w-3\" />\r\n          </Button>\r\n          \r\n          {renderPageNumbers()}\r\n          \r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => onPageChange(currentPage + 1)}\r\n            disabled={currentPage === totalPages}\r\n            className=\"h-7 px-2 border-gray-300\"\r\n            title=\"다음 페이지\"\r\n          >\r\n            <ChevronRight className=\"h-3 w-3\" />\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => onPageChange(totalPages)}\r\n            disabled={currentPage === totalPages}\r\n            className=\"h-7 px-2 border-gray-300\"\r\n            title=\"마지막 페이지\"\r\n          >\r\n            <ChevronsRight className=\"h-3 w-3\" />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\components\\dictionary\\common\\EmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\components\\dictionary\\common\\ErrorMessage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\components\\dictionary\\common\\LoadingSpinner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\components\\dictionary\\common\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\components\\layout\\AppSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\components\\layout\\Layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\components\\layout\\SiteHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\constants\\evaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\constants\\menu.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\constants\\pagination.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\components\\DictionaryFieldRenderer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[512,515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[512,515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport { TableCell } from \"@/components/ui/table\"\r\nimport { Input } from \"@/components/ui/input\"\r\nimport type { \r\n  DictionaryType,\r\n  BaseDictionaryItem, \r\n  DictionaryConfig,\r\n  SynonymDictionaryItem,\r\n  TypoDictionaryItem\r\n} from '../types/dictionary.types'\r\n\r\ninterface DictionaryFieldRendererProps<T extends BaseDictionaryItem> {\r\n  type: DictionaryType\r\n  config: DictionaryConfig<T>\r\n  item: T\r\n  isEditing: boolean\r\n  editingValues: Partial<T>\r\n  onEditingChange: (field: keyof T, value: any) => void\r\n  isNewItem: boolean\r\n}\r\n\r\n\r\nexport function DictionaryFieldRenderer<T extends BaseDictionaryItem>({\r\n  type,\r\n  config,\r\n  item,\r\n  isEditing,\r\n  editingValues,\r\n  onEditingChange\r\n}: DictionaryFieldRendererProps<T>) {\r\n  \r\n  if (type === 'synonym') {\r\n    const synonymItem = item as unknown as SynonymDictionaryItem\r\n    const editingSynonymItem = editingValues as unknown as Partial<SynonymDictionaryItem>\r\n    \r\n    if (isEditing) {\r\n      return (\r\n        <TableCell className=\"py-2\">\r\n          <Input\r\n            placeholder={config.messages.placeholder.keyword}\r\n            value={editingSynonymItem.keyword || ''}\r\n            onChange={(e) => onEditingChange('keyword' as keyof T, e.target.value)}\r\n            className=\"h-7 text-xs\"\r\n          />\r\n        </TableCell>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <TableCell className=\"py-2\">\r\n        <span className=\"font-medium text-xs\">\r\n          {synonymItem.keyword}\r\n        </span>\r\n      </TableCell>\r\n    )\r\n  }\r\n  \r\n  if (type === 'typo') {\r\n    const typoItem = item as unknown as TypoDictionaryItem\r\n    const editingTypoItem = editingValues as unknown as Partial<TypoDictionaryItem>\r\n    \r\n    if (isEditing) {\r\n      return (\r\n        <>\r\n          <TableCell className=\"py-2\">\r\n            <Input\r\n              placeholder={config.messages.placeholder.keyword}\r\n              value={editingTypoItem.keyword || ''}\r\n              onChange={(e) => onEditingChange('keyword' as keyof T, e.target.value)}\r\n              className=\"h-7 text-xs\"\r\n            />\r\n          </TableCell>\r\n          <TableCell className=\"py-2\">\r\n            <Input\r\n              placeholder={config.messages.placeholder.correctedWord}\r\n              value={editingTypoItem.correctedWord || ''}\r\n              onChange={(e) => onEditingChange('correctedWord' as keyof T, e.target.value)}\r\n              className=\"h-7 text-xs\"\r\n            />\r\n          </TableCell>\r\n        </>\r\n      )\r\n    }\r\n    \r\n    return (\r\n      <>\r\n        <TableCell className=\"py-2\">\r\n          <span className=\"font-medium text-xs\">\r\n            {typoItem.keyword}\r\n          </span>\r\n        </TableCell>\r\n        <TableCell className=\"py-2\">\r\n          <span className=\"text-xs font-medium\">\r\n            {typoItem.correctedWord}\r\n          </span>\r\n        </TableCell>\r\n      </>\r\n    )\r\n  }\r\n  \r\n  // Default renderer for user and stopword dictionaries\r\n  if (isEditing) {\r\n    return (\r\n      <TableCell className=\"py-2\">\r\n        <div className=\"space-y-2\">\r\n          <Input\r\n            placeholder={config.messages.placeholder.keyword}\r\n            value={editingValues.keyword || ''}\r\n            onChange={(e) => onEditingChange('keyword' as keyof T, e.target.value)}\r\n            className=\"h-7 text-xs\"\r\n          />\r\n          {!config.validation.keyword?.(editingValues.keyword || '') && editingValues.keyword !== undefined && (\r\n            <div className=\"text-red-600 text-xs\">{config.messages.validationError.keyword}</div>\r\n          )}\r\n        </div>\r\n      </TableCell>\r\n    )\r\n  }\r\n  \r\n  return (\r\n    <TableCell className=\"py-2\">\r\n      <div className=\"break-words\">\r\n        <span className=\"font-medium px-2 py-0.5 rounded text-xs\">\r\n          {item.keyword}\r\n        </span>\r\n      </div>\r\n    </TableCell>\r\n  )\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\components\\DictionaryHeader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\components\\DictionaryPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1592,1595],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1592,1595],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2412,2415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2412,2415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// SPA 환경에서는 'use client' 지시어 불필요\r\n\r\nimport { useMemo, useState } from 'react'\r\nimport { DictionaryHeader } from './DictionaryHeader'\r\nimport { DictionaryTable } from './DictionaryTable'\r\nimport { useDictionary } from '../hooks/useDictionary'\r\nimport { getDictionaryConfig } from '../configs/dictionaryConfigs'\r\nimport type { DictionaryType } from '../types/dictionary.types'\r\nimport type { DictionaryEnvironmentType } from '@/types/dashboard'\r\nimport { PaginationControls } from '@/components/common/PaginationControls'\r\nimport { DataTableToolbar } from '@/components/common/DataTableToolbar'\r\n\r\ninterface DictionaryPageProps {\r\n  type: DictionaryType\r\n}\r\n\r\nexport function DictionaryPage({ type }: DictionaryPageProps) {\r\n  const [environment, setEnvironment] = useState<DictionaryEnvironmentType>('CURRENT' as DictionaryEnvironmentType)\r\n  const config = getDictionaryConfig(type)\r\n  // 동의어, 오타교정 사전은 실시간 반영이 있으므로 모든 환경에서 편집 가능\r\n  const canEdit = (type === 'synonym' || type === 'typo') ? true : environment === 'CURRENT'\r\n  \r\n  const [page, setPage] = useState(0)\r\n  const [pageSize, setPageSize] = useState(10)\r\n  const [search, setSearch] = useState('')\r\n  const [searchInput, setSearchInput] = useState('')\r\n  \r\n  const { state, actions } = useDictionary(type, {\r\n    environment,\r\n    page,\r\n    search,\r\n    pageSize\r\n  })\r\n  \r\n  const totalPages = useMemo(() => {\r\n    if (state.total <= 0) return 0\r\n    return Math.ceil(state.total / pageSize)\r\n  }, [state.total, pageSize])\r\n  \r\n  return (\r\n    <div className=\"p-6 space-y-4\">\r\n      <DictionaryHeader\r\n        config={config as any}\r\n        canEdit={canEdit}\r\n        environment={environment}\r\n        selectedCount={state.editingState.selectedIds.size}\r\n        onEnvironmentChange={setEnvironment}\r\n        onAdd={actions.handleAdd}\r\n        onDeleteSelected={actions.handleDeleteSelected}\r\n        onApplyChanges={config.features.realtimeSync ? actions.handleApplyChanges : undefined}\r\n      />\r\n\r\n      <DataTableToolbar\r\n        showSearch\r\n        searchValue={searchInput}\r\n        onSearchChange={setSearchInput}\r\n        onSearch={() => setSearch(searchInput)}\r\n        totalCount={state.total}\r\n        currentPage={page}\r\n        totalPages={totalPages}\r\n        pageSize={pageSize}\r\n        onPageSizeChange={(ps) => { setPageSize(ps); setPage(0) }}\r\n      />\r\n\r\n      <DictionaryTable\r\n        type={type}\r\n        config={config as any}\r\n        items={state.items}\r\n        loading={state.loading}\r\n        error={state.error}\r\n        canEdit={canEdit}\r\n        sortField={state.sortField}\r\n        sortDirection={state.sortDirection}\r\n        onSort={actions.handleSort}\r\n        actions={actions}\r\n        editingState={state.editingState}\r\n        setEditingState={actions.setEditingState}\r\n      />\r\n      \r\n      {totalPages > 1 && (\r\n        <div className=\"mt-2\">\r\n          <PaginationControls\r\n            currentPage={page}\r\n            totalPages={totalPages}\r\n            totalCount={state.total}\r\n            pageSize={pageSize}\r\n            onPageChange={(p) => setPage(p)}\r\n            onPageSizeChange={(ps) => { setPageSize(ps); setPage(0) }}\r\n          />\r\n        </div>\r\n      )}\r\n      {totalPages <= 1 && (\r\n        <div className=\"mt-2\">\r\n          <PaginationControls\r\n            currentPage={page}\r\n            totalPages={Math.max(1, totalPages)}\r\n            totalCount={state.total}\r\n            pageSize={pageSize}\r\n            onPageChange={(p) => setPage(p)}\r\n            onPageSizeChange={(ps) => { setPageSize(ps); setPage(0) }}\r\n          />\r\n        </div>\r\n      )}\r\n    </div>\r\n  )\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\components\\DictionaryPageWrapper.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\components\\DictionaryTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6395,6398],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6395,6398],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client'\r\n\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@/components/ui/table\"\r\nimport { Button } from \"@/components/ui/button\"\r\nimport { Checkbox } from \"@/components/ui/checkbox\"\r\nimport { ArrowUpDown, ArrowUp, ArrowDown, Edit, Trash2, Check, X } from \"lucide-react\"\r\nimport { DictionaryFieldRenderer } from './DictionaryFieldRenderer'\r\nimport type { \r\n  DictionaryType,\r\n  BaseDictionaryItem, \r\n  DictionaryConfig,\r\n  DictionaryActions,\r\n  DictionarySortField,\r\n  DictionarySortDirection\r\n} from '../types/dictionary.types'\r\n\r\ninterface DictionaryTableProps<T extends BaseDictionaryItem> {\r\n  type: DictionaryType\r\n  config: DictionaryConfig<T>\r\n  items: T[]\r\n  loading: boolean\r\n  error: string | null\r\n  canEdit: boolean\r\n  sortField: DictionarySortField\r\n  sortDirection: DictionarySortDirection\r\n  onSort: (field: DictionarySortField) => void\r\n  actions: DictionaryActions<T>\r\n  editingState: {\r\n    addingItem: boolean\r\n    newItem: Partial<T>\r\n    editingItem: Partial<T>\r\n    highlightedId: number | null\r\n    selectedIds: Set<number>\r\n  }\r\n  setEditingState: React.Dispatch<React.SetStateAction<{\r\n    addingItem: boolean\r\n    newItem: Partial<T>\r\n    editingItem: Partial<T>\r\n    highlightedId: number | null\r\n    selectedIds: Set<number>\r\n  }>>\r\n}\r\n\r\nconst formatDate = (dateStr: string) => {\r\n  return new Date(dateStr).toLocaleDateString('ko-KR', {\r\n    month: '2-digit',\r\n    day: '2-digit',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  })\r\n}\r\n\r\nconst getSortIcon = (field: DictionarySortField, sortField: DictionarySortField, sortDirection: DictionarySortDirection) => {\r\n  if (sortField !== field) return <ArrowUpDown className=\"h-3.5 w-3.5\" />\r\n  return sortDirection === 'asc' ? <ArrowUp className=\"h-3.5 w-3.5\" /> : <ArrowDown className=\"h-3.5 w-3.5\" />\r\n}\r\n\r\nexport function DictionaryTable<T extends BaseDictionaryItem>({\r\n  type,\r\n  config,\r\n  items,\r\n  loading,\r\n  error,\r\n  canEdit,\r\n  sortField,\r\n  sortDirection,\r\n  onSort,\r\n  actions,\r\n  editingState,\r\n  setEditingState\r\n}: DictionaryTableProps<T>) {\r\n  \r\n  if (loading) {\r\n    return <div className=\"text-center py-4\">로딩 중...</div>\r\n  }\r\n  \r\n  if (error) {\r\n    return <div className=\"text-center py-4 text-red-600\">{error}</div>\r\n  }\r\n  \r\n  const getFieldHeaders = () => {\r\n    const headers = []\r\n    \r\n    // Always show keyword field\r\n    headers.push(\r\n      <TableHead\r\n        key=\"keyword\"\r\n        className=\"cursor-pointer hover:bg-gray-100 py-2 text-xs font-semibold text-gray-700\"\r\n        onClick={() => onSort('keyword')}\r\n      >\r\n        <div className=\"flex items-center gap-1\">\r\n          {config.name.replace(' 사전', '')}\r\n          {getSortIcon('keyword', sortField, sortDirection)}\r\n        </div>\r\n      </TableHead>\r\n    )\r\n    \r\n    // Add other fields based on config\r\n    if (config.fields.includes('correctedWord' as keyof T)) {\r\n      headers.push(\r\n        <TableHead key=\"correctedWord\" className=\"py-2 text-xs font-semibold text-gray-700\">\r\n          교정어\r\n        </TableHead>\r\n      )\r\n    }\r\n    \r\n    return headers\r\n  }\r\n  \r\n  return (\r\n    <div className=\"border border-gray-200 rounded-md overflow-hidden\">\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow className=\"bg-gray-50 hover:bg-gray-50\">\r\n            {canEdit && (\r\n              <TableHead className=\"w-10 py-2\">\r\n                <Checkbox\r\n                  checked={editingState.selectedIds.size === items.length && items.length > 0}\r\n                  onCheckedChange={(checked) => {\r\n                    if (checked) {\r\n                      setEditingState(prev => ({\r\n                        ...prev,\r\n                        selectedIds: new Set(items.map(item => item.id))\r\n                      }))\r\n                    } else {\r\n                      setEditingState(prev => ({\r\n                        ...prev,\r\n                        selectedIds: new Set()\r\n                      }))\r\n                    }\r\n                  }}\r\n                />\r\n              </TableHead>\r\n            )}\r\n            {getFieldHeaders()}\r\n            <TableHead\r\n              className=\"cursor-pointer hover:bg-gray-100 py-2 text-xs font-semibold text-gray-700 w-24\"\r\n              onClick={() => onSort('updatedAt')}\r\n            >\r\n              <div className=\"flex items-center gap-1\">\r\n                수정일\r\n                {getSortIcon('updatedAt', sortField, sortDirection)}\r\n              </div>\r\n            </TableHead>\r\n            {canEdit && <TableHead className=\"py-2 text-xs font-semibold text-gray-700 w-20\">액션</TableHead>}\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {editingState.addingItem && canEdit && (\r\n            <TableRow className=\"bg-gray-50 hover:bg-gray-50\">\r\n              <TableCell className=\"py-2\">\r\n                -\r\n              </TableCell>\r\n              <DictionaryFieldRenderer\r\n                type={type}\r\n                config={config}\r\n                item={editingState.newItem as T}\r\n                isEditing={true}\r\n                editingValues={editingState.newItem}\r\n                onEditingChange={(field, value) => {\r\n                  setEditingState(prev => ({\r\n                    ...prev,\r\n                    newItem: { ...prev.newItem, [field]: value }\r\n                  }))\r\n                }}\r\n                isNewItem={true}\r\n              />\r\n              <TableCell className=\"py-2 text-xs text-gray-500\">\r\n                -\r\n              </TableCell>\r\n              <TableCell className=\"py-2\">\r\n                <div className=\"flex gap-1\">\r\n                  <Button\r\n                    size=\"sm\"\r\n                    onClick={actions.handleSaveNew}\r\n                    className=\"h-6 w-6 p-0 bg-green-600 hover:bg-green-700\"\r\n                  >\r\n                    <Check className=\"h-3 w-3\" />\r\n                  </Button>\r\n                  <Button\r\n                    size=\"sm\"\r\n                    variant=\"outline\"\r\n                    onClick={actions.handleCancelNew}\r\n                    className=\"h-6 w-6 p-0 border-gray-300\"\r\n                  >\r\n                    <X className=\"h-3 w-3\" />\r\n                  </Button>\r\n                </div>\r\n              </TableCell>\r\n            </TableRow>\r\n          )}\r\n          {items.map((item) => {\r\n            const isEditing = item.id === (editingState.editingItem as any)?.id\r\n            \r\n            return (\r\n              <TableRow\r\n                key={item.id}\r\n                className={`hover:bg-gray-50 ${editingState.highlightedId === item.id ? \"bg-amber-50\" : \"\"} ${editingState.selectedIds.has(item.id) ? \"bg-blue-50\" : \"\"}`}\r\n              >\r\n                {canEdit && (\r\n                  <TableCell className=\"py-2\">\r\n                    <Checkbox\r\n                      checked={editingState.selectedIds.has(item.id)}\r\n                      onCheckedChange={(checked) => {\r\n                        setEditingState(prev => {\r\n                          const newSelectedIds = new Set(prev.selectedIds)\r\n                          if (checked) {\r\n                            newSelectedIds.add(item.id)\r\n                          } else {\r\n                            newSelectedIds.delete(item.id)\r\n                          }\r\n                          return { ...prev, selectedIds: newSelectedIds }\r\n                        })\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                )}\r\n                <DictionaryFieldRenderer\r\n                  type={type}\r\n                  config={config}\r\n                  item={item}\r\n                  isEditing={isEditing}\r\n                  editingValues={isEditing ? editingState.editingItem : item}\r\n                  onEditingChange={(field, value) => {\r\n                    setEditingState(prev => ({\r\n                      ...prev,\r\n                      editingItem: { ...prev.editingItem, [field]: value }\r\n                    }))\r\n                  }}\r\n                  isNewItem={false}\r\n                />\r\n                <TableCell className=\"py-2 text-xs text-gray-500\">\r\n                  {formatDate(item.updatedAt)}\r\n                </TableCell>\r\n                {canEdit && (\r\n                  <TableCell className=\"py-2\">\r\n                    {isEditing ? (\r\n                      <div className=\"flex gap-1\">\r\n                        <Button\r\n                          size=\"sm\"\r\n                          onClick={() => actions.handleSaveEdit(item)}\r\n                          className=\"h-6 w-6 p-0 bg-green-600 hover:bg-green-700\"\r\n                        >\r\n                          <Check className=\"h-3 w-3\" />\r\n                        </Button>\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"outline\"\r\n                          onClick={() => actions.handleCancelEdit(item)}\r\n                          className=\"h-6 w-6 p-0 border-gray-300\"\r\n                        >\r\n                          <X className=\"h-3 w-3\" />\r\n                        </Button>\r\n                      </div>\r\n                    ) : (\r\n                      <div className=\"flex gap-1\">\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"outline\"\r\n                          onClick={() => actions.handleEdit(item)}\r\n                          className=\"h-6 w-6 p-0 border-gray-300 hover:bg-gray-100\"\r\n                        >\r\n                          <Edit className=\"h-3 w-3\" />\r\n                        </Button>\r\n                        <Button\r\n                          size=\"sm\"\r\n                          variant=\"outline\"\r\n                          onClick={() => actions.handleDelete(item.id)}\r\n                          className=\"h-6 w-6 p-0 border-red-300 text-red-600 hover:bg-red-50\"\r\n                        >\r\n                          <Trash2 className=\"h-3 w-3\" />\r\n                        </Button>\r\n                      </div>\r\n                    )}\r\n                  </TableCell>\r\n                )}\r\n              </TableRow>\r\n            )\r\n          })}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  )\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\components\\MorphemeAnalyzer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\configs\\dictionaryConfigs.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\hooks\\useDictionary.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\hooks\\useDictionaryActions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1690,1693],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1690,1693],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2873,2876],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2873,2876],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2959,2962],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2959,2962],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3044,3047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3044,3047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":94,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":94,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3151,3154],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3151,3154],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'type'. Either include it or remove the dependency array.","line":120,"column":6,"nodeType":"ArrayExpression","endLine":120,"endColumn":66,"suggestions":[{"desc":"Update the dependencies array to be: [validateItem, editingState.newItem, toast, type, refetch]","fix":{"range":[3776,3836],"text":"[validateItem, editingState.newItem, toast, type, refetch]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4817,4820],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4817,4820],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":157,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":157,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4842,4845],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4842,4845],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4932,4935],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4932,4935],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":158,"column":93,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":158,"endColumn":96,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4963,4966],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4963,4966],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5052,5055],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5052,5055],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5146,5149],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5146,5149],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'type'. Either include it or remove the dependency array.","line":188,"column":6,"nodeType":"ArrayExpression","endLine":188,"endColumn":70,"suggestions":[{"desc":"Update the dependencies array to be: [validateItem, editingState.editingItem, toast, type, refetch]","fix":{"range":[5751,5815],"text":"[validateItem, editingState.editingItem, toast, type, refetch]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'type'. Either include it or remove the dependency array.","line":217,"column":6,"nodeType":"ArrayExpression","endLine":217,"endColumn":30,"suggestions":[{"desc":"Update the dependencies array to be: [config.messages.deleteConfirm, refetch, toast, type]","fix":{"range":[6576,6600],"text":"[config.messages.deleteConfirm, refetch, toast, type]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'type'. Either include it or remove the dependency array.","line":254,"column":6,"nodeType":"ArrayExpression","endLine":254,"endColumn":56,"suggestions":[{"desc":"Update the dependencies array to be: [editingState.selectedIds, type, toast, refetch]","fix":{"range":[7606,7656],"text":"[editingState.selectedIds, type, toast, refetch]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":295,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":295,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8767,8770],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8767,8770],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useCallback } from 'react'\r\nimport { synonymDictionaryService, typoCorrectionDictionaryService, stopwordDictionaryService, userDictionaryService } from '@/services'\r\nimport { useToast } from '@/components/ui/use-toast'\r\nimport { getDictionaryConfig } from '../configs/dictionaryConfigs'\r\nimport type { DictionaryType, BaseDictionaryItem, DictionaryActions } from '../types/dictionary.types'\r\nimport type { DictionaryEnvironmentType } from '@/types/dashboard'\r\n\r\ninterface UseDictionaryActionsParams {\r\n  type: DictionaryType\r\n  environment: DictionaryEnvironmentType\r\n  refetch: () => void\r\n}\r\n\r\ninterface EditingState<T extends BaseDictionaryItem> {\r\n  addingItem: boolean\r\n  newItem: Partial<T>\r\n  editingItem: Partial<T>\r\n  highlightedId: number | null\r\n  selectedIds: Set<number>\r\n}\r\n\r\nexport function useDictionaryActions<T extends BaseDictionaryItem>({\r\n  type,\r\n  environment: _environment,\r\n  refetch\r\n}: UseDictionaryActionsParams): DictionaryActions<T> & { editingState: EditingState<T>, setEditingState: React.Dispatch<React.SetStateAction<EditingState<T>>> } {\r\n  const config = getDictionaryConfig(type)\r\n  const { toast } = useToast()\r\n  \r\n  const [editingState, setEditingState] = useState<EditingState<T>>({\r\n    addingItem: false,\r\n    newItem: {},\r\n    editingItem: {},\r\n    highlightedId: null,\r\n    selectedIds: new Set()\r\n  })\r\n\r\n  const validateItem = useCallback((item: Partial<T>): string | null => {\r\n    for (const field of config.fields) {\r\n      const validator = config.validation[field as keyof typeof config.validation]\r\n      if (validator && field in item && item[field as keyof T] !== undefined) {\r\n        const isValid = (validator as any)(item[field as keyof T])\r\n        if (!isValid) {\r\n          return config.messages.validationError[field as string] || '유효하지 않은 입력입니다.'\r\n        }\r\n      }\r\n    }\r\n    return null\r\n  }, [config])\r\n\r\n  const handleAdd = useCallback(() => {\r\n    setEditingState(prev => ({ \r\n      ...prev, \r\n      addingItem: true, \r\n      newItem: {} \r\n    }))\r\n  }, [])\r\n\r\n  const handleCancelNew = useCallback(() => {\r\n    setEditingState(prev => ({ \r\n      ...prev, \r\n      addingItem: false, \r\n      newItem: {} \r\n    }))\r\n  }, [])\r\n\r\n  const handleSaveNew = useCallback(async () => {\r\n    const error = validateItem(editingState.newItem)\r\n    if (error) {\r\n      toast({\r\n        title: '입력 오류',\r\n        description: error,\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n\r\n    try {\r\n      const service =\r\n        type === 'user' ? userDictionaryService :\r\n        type === 'stopword' ? stopwordDictionaryService :\r\n        type === 'synonym' ? synonymDictionaryService :\r\n        typoCorrectionDictionaryService\r\n\r\n      // 오타교정은 분리된 필드로 전송(typoWord/correctWord)\r\n      const payload = type === 'typo'\r\n        ? {\r\n            typoWord: String((editingState.newItem as any).keyword || '').trim(),\r\n            correctWord: String((editingState.newItem as any).correctedWord || '').trim(),\r\n            description: (editingState.newItem as any).description,\r\n          }\r\n        : editingState.newItem\r\n\r\n      const response = await (service as any).create(payload)\r\n      \r\n      setEditingState(prev => ({ \r\n        ...prev, \r\n        addingItem: false, \r\n        newItem: {},\r\n        highlightedId: response.id\r\n      }))\r\n      \r\n      setTimeout(() => {\r\n        setEditingState(prev => ({ ...prev, highlightedId: null }))\r\n      }, 2000)\r\n      \r\n      toast({\r\n        title: '추가 완료',\r\n        description: '사전 항목이 추가되었습니다.'\r\n      })\r\n      \r\n      refetch()\r\n    } catch (error) {\r\n      toast({\r\n        title: '추가 실패',\r\n        description: error instanceof Error ? error.message : '사전 항목 추가에 실패했습니다.',\r\n        variant: 'destructive'\r\n      })\r\n    }\r\n  }, [editingState.newItem, config, refetch, toast, validateItem])\r\n\r\n  const handleEdit = useCallback((item: T) => {\r\n    setEditingState(prev => ({ \r\n      ...prev, \r\n      editingItem: { ...item } \r\n    }))\r\n  }, [])\r\n\r\n  const handleCancelEdit = useCallback((_item: T) => {\r\n    setEditingState(prev => ({ \r\n      ...prev, \r\n      editingItem: {} \r\n    }))\r\n  }, [])\r\n\r\n  const handleSaveEdit = useCallback(async (item: T) => {\r\n    const error = validateItem(editingState.editingItem)\r\n    if (error) {\r\n      toast({\r\n        title: '입력 오류',\r\n        description: error,\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n\r\n    try {\r\n      const service =\r\n        type === 'user' ? userDictionaryService :\r\n        type === 'stopword' ? stopwordDictionaryService :\r\n        type === 'synonym' ? synonymDictionaryService :\r\n        typoCorrectionDictionaryService\r\n\r\n      // 오타교정은 분리된 필드로 전송(typoWord/correctWord)\r\n      const payload = type === 'typo'\r\n        ? {\r\n            typoWord: String((editingState.editingItem as any).keyword || (item as any).keyword || '').trim(),\r\n            correctWord: String((editingState.editingItem as any).correctedWord || (item as any).correctedWord || '').trim(),\r\n            description: (editingState.editingItem as any).description,\r\n          }\r\n        : editingState.editingItem\r\n\r\n      await (service as any).update(item.id, payload)\r\n      \r\n      setEditingState(prev => ({ \r\n        ...prev, \r\n        editingItem: {},\r\n        highlightedId: item.id\r\n      }))\r\n      \r\n      setTimeout(() => {\r\n        setEditingState(prev => ({ ...prev, highlightedId: null }))\r\n      }, 2000)\r\n      \r\n      toast({\r\n        title: '수정 완료',\r\n        description: '사전 항목이 수정되었습니다.'\r\n      })\r\n      \r\n      refetch()\r\n    } catch (error) {\r\n      toast({\r\n        title: '수정 실패',\r\n        description: error instanceof Error ? error.message : '사전 항목 수정에 실패했습니다.',\r\n        variant: 'destructive'\r\n      })\r\n    }\r\n  }, [editingState.editingItem, config, refetch, toast, validateItem])\r\n\r\n  const handleDelete = useCallback(async (id: number) => {\r\n    if (!confirm(config.messages.deleteConfirm || '이 항목을 삭제하시겠습니까?')) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      const service =\r\n        type === 'user' ? userDictionaryService :\r\n        type === 'stopword' ? stopwordDictionaryService :\r\n        type === 'synonym' ? synonymDictionaryService :\r\n        typoCorrectionDictionaryService\r\n\r\n      await service.delete(id)\r\n      \r\n      toast({\r\n        title: '삭제 완료',\r\n        description: '사전 항목이 삭제되었습니다.'\r\n      })\r\n      \r\n      refetch()\r\n    } catch (error) {\r\n      toast({\r\n        title: '삭제 실패',\r\n        description: error instanceof Error ? error.message : '사전 항목 삭제에 실패했습니다.',\r\n        variant: 'destructive'\r\n      })\r\n    }\r\n  }, [config, refetch, toast])\r\n\r\n  const handleDeleteSelected = useCallback(async () => {\r\n    const selectedCount = editingState.selectedIds.size\r\n    if (selectedCount === 0) return\r\n    \r\n    if (!confirm(`선택한 ${selectedCount}개 항목을 삭제하시겠습니까?`)) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      const service =\r\n        type === 'user' ? userDictionaryService :\r\n        type === 'stopword' ? stopwordDictionaryService :\r\n        type === 'synonym' ? synonymDictionaryService :\r\n        typoCorrectionDictionaryService\r\n\r\n      await service.bulkDelete(Array.from(editingState.selectedIds))\r\n      \r\n      setEditingState(prev => ({ \r\n        ...prev, \r\n        selectedIds: new Set() \r\n      }))\r\n      \r\n      toast({\r\n        title: '삭제 완료',\r\n        description: `${selectedCount}개 항목이 삭제되었습니다.`\r\n      })\r\n      \r\n      refetch()\r\n    } catch (error) {\r\n      toast({\r\n        title: '삭제 실패',\r\n        description: error instanceof Error ? error.message : '선택한 항목 삭제에 실패했습니다.',\r\n        variant: 'destructive'\r\n      })\r\n    }\r\n  }, [editingState.selectedIds, config, refetch, toast])\r\n\r\n  const handleApplyChanges = useCallback(async (env: DictionaryEnvironmentType) => {\r\n    if (!config.features.realtimeSync) {\r\n      return\r\n    }\r\n\r\n    // 현재 환경에서는 실시간 반영 불가\r\n    if (env === 'CURRENT') {\r\n      toast({\r\n        title: '실시간 반영 불가',\r\n        description: '현재 환경에서는 실시간 반영을 할 수 없습니다. 개발 또는 운영 환경을 선택해주세요.',\r\n        variant: 'destructive'\r\n      })\r\n      return\r\n    }\r\n\r\n    if (!confirm(config.messages.applyConfirm || '변경사항을 실시간으로 반영하시겠습니까?')) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      if (type === 'synonym') {\r\n        await synonymDictionaryService.realtimeSync(env)\r\n      } else if (type === 'typo') {\r\n        await typoCorrectionDictionaryService.realtimeSync(env)\r\n      }\r\n      \r\n      toast({\r\n        title: '반영 완료',\r\n        description: config.messages.applySuccess || '변경사항이 실시간으로 반영되었습니다.'\r\n      })\r\n    } catch (error) {\r\n      toast({\r\n        title: '반영 실패',\r\n        description: error instanceof Error ? error.message : '실시간 반영에 실패했습니다.',\r\n        variant: 'destructive'\r\n      })\r\n    }\r\n  }, [config, type, toast])\r\n\r\n  const handleSort = useCallback((_field: any) => {\r\n    // This will be handled by the parent component\r\n  }, [])\r\n\r\n  const handleSearch = useCallback((_value: string) => {\r\n    // This will be handled by the parent component\r\n  }, [])\r\n\r\n  const handlePageChange = useCallback((_page: number) => {\r\n    // This will be handled by the parent component\r\n  }, [])\r\n\r\n  const handleEnvironmentChange = useCallback((_env: DictionaryEnvironmentType) => {\r\n    // This will be handled by the parent component\r\n  }, [])\r\n\r\n  return {\r\n    editingState,\r\n    setEditingState,\r\n    handleAdd,\r\n    handleCancelNew,\r\n    handleSaveNew,\r\n    handleEdit,\r\n    handleCancelEdit,\r\n    handleSaveEdit,\r\n    handleDelete,\r\n    handleDeleteSelected,\r\n    handleApplyChanges: config.features.realtimeSync ? handleApplyChanges : undefined,\r\n    handleSort,\r\n    handleSearch,\r\n    handlePageChange,\r\n    handleEnvironmentChange,\r\n    refetch: async () => { refetch() }\r\n  }\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\hooks\\useDictionaryData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1910,1913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1910,1913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useQuery } from '@tanstack/react-query'\r\nimport { synonymDictionaryService, typoCorrectionDictionaryService, stopwordDictionaryService, userDictionaryService } from '@/services'\r\nimport { queryKeys } from '@/lib/query-client'\r\nimport type { DictionaryType, BaseDictionaryItem } from '../types/dictionary.types'\r\nimport type { DictionaryEnvironmentType, DictionarySortField, DictionarySortDirection } from '@/types/dashboard'\r\n\r\ninterface UseDictionaryDataParams {\r\n  type: DictionaryType\r\n  page: number\r\n  pageSize: number\r\n  search: string\r\n  sortField: DictionarySortField\r\n  sortDirection: DictionarySortDirection\r\n  environment: DictionaryEnvironmentType\r\n}\r\n\r\nexport function useDictionaryData<T extends BaseDictionaryItem>({\r\n  type,\r\n  page,\r\n  pageSize,\r\n  search,\r\n  sortField,\r\n  sortDirection,\r\n  environment\r\n}: UseDictionaryDataParams) {\r\n  \r\n  const paramsForKey = {\r\n    page: page,\r\n    size: pageSize,\r\n    sortBy: sortField,\r\n    sortDir: sortDirection,\r\n    search: search || undefined,\r\n    environment\r\n  }\r\n\r\n  const queryKey = (\r\n    type === 'user' ? queryKeys.dictionary.user.list(paramsForKey) :\r\n    type === 'stopword' ? queryKeys.dictionary.stopword.list(paramsForKey) :\r\n    type === 'synonym' ? queryKeys.dictionary.synonym.list(paramsForKey) :\r\n    queryKeys.dictionary.typoCorrection.list(paramsForKey)\r\n  )\r\n  \r\n  return useQuery({\r\n    queryKey,\r\n    queryFn: async () => {\r\n      const params = {\r\n        page: page,\r\n        size: pageSize,\r\n        sortBy: sortField,\r\n        sortDir: sortDirection,\r\n        search: search || undefined,\r\n        environment,\r\n      } as const\r\n\r\n      const service =\r\n        type === 'user' ? userDictionaryService :\r\n        type === 'stopword' ? stopwordDictionaryService :\r\n        type === 'synonym' ? synonymDictionaryService :\r\n        typoCorrectionDictionaryService\r\n\r\n      return (await service.getList(params as any)) as unknown as {\r\n        content: T[]\r\n        totalElements: number\r\n        totalPages: number\r\n      }\r\n    },\r\n    retry: 1,\r\n    staleTime: 30000,\r\n  })\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\features\\dictionary\\types\\dictionary.types.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":92,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":92,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2635,2638],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2635,2638],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { DictionaryEnvironmentType } from '@/types/dashboard'\r\n\r\nexport type DictionarySortField = 'keyword' | 'updatedAt' | 'createdAt'\r\nexport type DictionarySortDirection = 'asc' | 'desc'\r\n\r\nexport type DictionaryType = 'user' | 'stopword' | 'synonym' | 'typo'\r\n\r\nexport interface BaseDictionaryItem {\r\n  id: number\r\n  keyword: string\r\n  createdAt: string\r\n  updatedAt: string\r\n  isEditing?: boolean\r\n}\r\n\r\nexport type UserDictionaryItem = BaseDictionaryItem\r\n\r\nexport type StopwordDictionaryItem = BaseDictionaryItem\r\n\r\nexport interface SynonymDictionaryItem extends BaseDictionaryItem {\r\n  synonyms: string[]\r\n}\r\n\r\nexport interface TypoDictionaryItem extends BaseDictionaryItem {\r\n  correctedWord: string\r\n}\r\n\r\nexport type DictionaryItem = \r\n  | UserDictionaryItem \r\n  | StopwordDictionaryItem \r\n  | SynonymDictionaryItem \r\n  | TypoDictionaryItem\r\n\r\nexport interface DictionaryConfig<T extends BaseDictionaryItem = BaseDictionaryItem> {\r\n  name: string\r\n  apiPath: string\r\n  theme: {\r\n    color: 'purple' | 'orange' | 'blue' | 'green'\r\n    iconName: string\r\n  }\r\n  fields: Array<keyof T>\r\n  validation: {\r\n    [K in keyof T]?: (value: T[K]) => boolean\r\n  }\r\n  features: {\r\n    realtimeSync: boolean\r\n    customRenderer?: string\r\n  }\r\n  messages: {\r\n    placeholder: Record<string, string>\r\n    validationError: Record<string, string>\r\n    deleteConfirm?: string\r\n    applyConfirm?: string\r\n    applySuccess?: string\r\n  }\r\n}\r\n\r\nexport interface DictionaryState<T extends BaseDictionaryItem> {\r\n  items: T[]\r\n  loading: boolean\r\n  error: string | null\r\n  total: number\r\n  page: number\r\n  pageSize: number\r\n  search: string\r\n  sortField: DictionarySortField\r\n  sortDirection: DictionarySortDirection\r\n  environment: DictionaryEnvironmentType\r\n}\r\n\r\nexport interface DictionaryActions<T extends BaseDictionaryItem> {\r\n  handleAdd: () => void\r\n  handleCancelNew: () => void\r\n  handleSaveNew: () => Promise<void>\r\n  handleEdit: (item: T) => void\r\n  handleCancelEdit: (item: T) => void\r\n  handleSaveEdit: (item: T) => Promise<void>\r\n  handleDelete: (id: number) => Promise<void>\r\n  handleDeleteSelected: () => Promise<void>\r\n  handleApplyChanges?: (environment: DictionaryEnvironmentType) => Promise<void>\r\n  handleSort: (field: DictionarySortField) => void\r\n  handleSearch: (value: string) => void\r\n  handlePageChange: (page: number) => void\r\n  handleEnvironmentChange: (env: DictionaryEnvironmentType) => void\r\n  refetch: () => Promise<void>\r\n}\r\n\r\nexport interface DictionaryFieldRendererProps<T extends BaseDictionaryItem> {\r\n  item: T\r\n  isEditing: boolean\r\n  editingValues: Partial<T>\r\n  onEditingChange: (field: keyof T, value: any) => void\r\n  config: DictionaryConfig<T>\r\n}\r\n\r\nexport type DictionaryConfigs = {\r\n  [K in DictionaryType]: K extends 'user' ? DictionaryConfig<UserDictionaryItem> :\r\n    K extends 'stopword' ? DictionaryConfig<StopwordDictionaryItem> :\r\n    K extends 'synonym' ? DictionaryConfig<SynonymDictionaryItem> :\r\n    K extends 'typo' ? DictionaryConfig<TypoDictionaryItem> :\r\n    never\r\n}","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\hooks\\use-async-task.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'taskStatus.data'. Either include it or remove the dependency array.","line":70,"column":6,"nodeType":"ArrayExpression","endLine":70,"endColumn":120,"suggestions":[{"desc":"Update the dependencies array to be: [taskId, taskStatus.data.status, taskType, queryClient, completedTaskIds, onComplete, onError, shouldRefreshData, taskStatus.data]","fix":{"range":[2207,2321],"text":"[taskId, taskStatus.data.status, taskType, queryClient, completedTaskIds, onComplete, onError, shouldRefreshData, taskStatus.data]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { useState, useEffect } from 'react'\r\nimport { useQueryClient } from '@tanstack/react-query'\r\nimport { useTaskStatus, useRunningTasks } from './use-evaluation'\r\n\r\ninterface AsyncTaskHookOptions {\r\n  onComplete?: (result?: string) => void\r\n  onError?: (error: string) => void\r\n  shouldRefreshData?: boolean\r\n}\r\n\r\nexport function useAsyncTask(\r\n  taskType: 'QUERY_GENERATION' | 'CANDIDATE_GENERATION' | 'LLM_EVALUATION',\r\n  options: AsyncTaskHookOptions = {}\r\n) {\r\n  const [taskId, setTaskId] = useState<number | null>(null)\r\n  const [completedTaskIds, setCompletedTaskIds] = useState<Set<number>>(new Set())\r\n  const queryClient = useQueryClient()\r\n  \r\n  const { onComplete, onError, shouldRefreshData = true } = options\r\n  \r\n  const runningTasksQuery = useRunningTasks()\r\n  const taskStatus = useTaskStatus(taskId)\r\n\r\n  // 페이지 로드 시 실행 중인 작업 복구\r\n  useEffect(() => {\r\n    if (runningTasksQuery.data && runningTasksQuery.data.length > 0 && !taskId) {\r\n      const runningTask = runningTasksQuery.data.find(task => task.taskType === taskType)\r\n      if (runningTask) {\r\n        setTaskId(runningTask.id)\r\n        // Task recovery: ${taskType}\r\n      }\r\n    }\r\n  }, [runningTasksQuery.data, taskId, taskType])\r\n\r\n  // 작업 완료/실패 처리\r\n  useEffect(() => {\r\n    if (!taskId || !taskStatus.data) return\r\n    \r\n    // 이미 처리된 작업인지 확인\r\n    if (completedTaskIds.has(taskId)) return\r\n    \r\n    if (taskStatus.data.status === 'COMPLETED') {\r\n      // Task completed: ${taskType}\r\n      \r\n      // 완료된 작업 ID 기록\r\n      setCompletedTaskIds(prev => new Set(prev).add(taskId))\r\n      \r\n      if (onComplete) {\r\n        onComplete(taskStatus.data.result ?? undefined)\r\n      }\r\n      \r\n      if (shouldRefreshData) {\r\n        // evaluation 관련 쿼리 무효화\r\n        queryClient.invalidateQueries({ queryKey: ['evaluation'] })\r\n      }\r\n      \r\n      setTaskId(null)\r\n    } else if (taskStatus.data.status === 'FAILED') {\r\n      console.error(`❌ ${taskType} 실패:`, taskStatus.data.errorMessage)\r\n      \r\n      // 실패한 작업 ID 기록\r\n      setCompletedTaskIds(prev => new Set(prev).add(taskId))\r\n      \r\n      if (onError) {\r\n        onError(taskStatus.data.errorMessage || '알 수 없는 오류')\r\n      }\r\n      \r\n      setTaskId(null)\r\n    }\r\n  }, [taskId, taskStatus.data?.status, taskType, queryClient, completedTaskIds, onComplete, onError, shouldRefreshData])\r\n\r\n  const startTask = (newTaskId: number) => {\r\n    setTaskId(newTaskId)\r\n  }\r\n\r\n  const isRunning = !!taskId\r\n  const progress = taskStatus.data?.progress || 0\r\n  const status = taskStatus.data?.status\r\n  const result = taskStatus.data?.result\r\n\r\n  return {\r\n    taskId,\r\n    isRunning,\r\n    progress,\r\n    status,\r\n    result,\r\n    startTask,\r\n    data: taskStatus.data\r\n  }\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\hooks\\use-dashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\hooks\\use-debounce.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\hooks\\use-evaluation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\hooks\\use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\hooks\\useLoadingState.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\lib\\api.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":111,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":111,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2518,2521],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2518,2521],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2605,2608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2605,2608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// 서비스 게이트웨이: 서비스 레이어만 재-export (슬림화)\r\nexport * from '@/services'\r\n\r\n// 하위 호환 및 타입 제공만 유지 (미사용 import 제거)\r\nimport { apiFetch } from '@/services/common/api-client'\r\n// 대시보드 타입은 현재 파일에서 직접 사용하지 않음\r\n\r\n// 검색 관련 타입 정의\r\nexport interface Product {\r\n  id: string\r\n  score?: number\r\n  name: string\r\n  nameRaw: string\r\n  model?: string[]\r\n  brand: string\r\n  categoryName: string\r\n  price: number\r\n  registeredMonth?: string\r\n  rating: number\r\n  reviewCount: number\r\n  thumbnailUrl: string\r\n  specs?: string\r\n  specsRaw?: string\r\n}\r\n\r\nexport interface AggregationBucket {\r\n  key: string\r\n  docCount: number\r\n}\r\n\r\nexport interface SearchRequest {\r\n  query?: string\r\n  page: number\r\n  size: number\r\n  sortField?: 'score' | 'price' | 'rating' | 'reviewCount' | 'name'\r\n  sortOrder?: 'asc' | 'desc'\r\n  brand?: string[]\r\n  category?: string[]\r\n  priceFrom?: number\r\n  priceTo?: number\r\n}\r\n\r\nexport interface SearchResponse {\r\n  hits: {\r\n    total: number\r\n    data: Product[]\r\n  }\r\n  aggregations?: {\r\n    brand_name?: AggregationBucket[]\r\n    category_name?: AggregationBucket[]\r\n  }\r\n  meta: {\r\n    page: number\r\n    size: number\r\n    totalPages: number\r\n    processingTime: number\r\n  }\r\n}\r\n\r\nexport interface AutocompleteResponse {\r\n  suggestions: string[]\r\n  count: number\r\n}\r\n\r\nexport interface PopularKeyword {\r\n  keyword: string\r\n  searchCount: number\r\n  rank: number\r\n  previousRank: number\r\n  rankChange: number\r\n  changeStatus: \"UP\" | \"DOWN\" | \"NEW\" | \"SAME\"\r\n}\r\n\r\nexport interface TrendingKeyword {\r\n  keyword: string\r\n  currentCount: number\r\n  previousCount: number\r\n  growthRate: number\r\n  rank: number\r\n}\r\n\r\nexport interface PopularKeywordsApiResponse {\r\n  keywords: PopularKeyword[]\r\n  fromDate: string\r\n  toDate: string\r\n  totalCount: number\r\n  lastUpdated: string\r\n}\r\n\r\nexport interface TrendingKeywordsApiResponse {\r\n  keywords: TrendingKeyword[]\r\n  currentFromDate: string\r\n  currentToDate: string\r\n  previousFromDate: string\r\n  previousToDate: string\r\n  totalCount: number\r\n  lastUpdated: string\r\n}\r\n\r\nexport interface RealtimeKeywordsResponse {\r\n  keywords: PopularKeyword[]\r\n  fromDate: string\r\n  toDate: string\r\n  totalCount: number\r\n  lastUpdated: string\r\n}\r\n\r\n// apiFetch, apiFetchJson, apiFetchMultipart 는 services 레이어 구현을 사용합니다.\r\n// 헬스체크/상태 확인 등 레거시는 차후 services 측으로 이관 예정\r\nexport async function healthCheck(): Promise<{ status: 'ok' | 'error', message: string }> { return { status: 'ok', message: 'deprecated' } }\r\nexport async function checkApiStatus() { return { status: 'ok', message: 'deprecated' } as any }\r\n\r\n// 쿼리 파라미터를 URL에 추가하는 헬퍼 함수\r\nfunction buildQueryString(params: Record<string, any>): string {\r\n  const searchParams = new URLSearchParams()\r\n  \r\n  Object.entries(params).forEach(([key, value]) => {\r\n    if (value !== undefined && value !== null && value !== '') {\r\n      searchParams.append(key, String(value))\r\n    }\r\n  })\r\n  \r\n  const queryString = searchParams.toString()\r\n  return queryString ? `?${queryString}` : ''\r\n}\r\n\r\n// 대시보드 API 함수들\r\n// 대시보드 API는 services 레이어의 dashboardApi 를 사용하십시오.\r\n\r\n// 검색 API 함수들\r\nexport const searchApi = {\r\n  // 자동완성\r\n  async getAutocomplete(keyword: string): Promise<AutocompleteResponse> {\r\n    const queryString = buildQueryString({ keyword })\r\n    return apiFetch<AutocompleteResponse>(`/v1/search/autocomplete${queryString}`)\r\n  },\r\n\r\n  // 상품 검색 - GET 방식\r\n  async searchProducts(searchRequest: SearchRequest): Promise<SearchResponse> {\r\n    const params = new URLSearchParams()\r\n    \r\n    // 필수 파라미터\r\n    if (searchRequest.query) {\r\n      params.set('query', searchRequest.query)\r\n    }\r\n    params.set('page', searchRequest.page.toString())\r\n    params.set('size', searchRequest.size.toString())\r\n    \r\n    // 선택적 파라미터\r\n    if (searchRequest.sortField) {\r\n      params.set('sortField', searchRequest.sortField)\r\n    }\r\n    if (searchRequest.sortOrder) {\r\n      params.set('sortOrder', searchRequest.sortOrder)\r\n    }\r\n    \r\n    // 가격 범위\r\n    if (searchRequest.priceFrom !== undefined) {\r\n      params.set('priceFrom', searchRequest.priceFrom.toString())\r\n    }\r\n    if (searchRequest.priceTo !== undefined) {\r\n      params.set('priceTo', searchRequest.priceTo.toString())\r\n    }\r\n    \r\n    // 다중 값 파라미터들\r\n    searchRequest.brand?.forEach(brand => {\r\n      params.append('brand', brand)\r\n    })\r\n    searchRequest.category?.forEach(category => {\r\n      params.append('category', category)\r\n    })\r\n    \r\n    const queryString = params.toString()\r\n    return apiFetch<SearchResponse>(`/v1/search?${queryString}`)\r\n  },\r\n\r\n\r\n  // 실시간 인기 검색어 조회\r\n  async getRealtimeKeywords(params: { limit?: number } = {}): Promise<RealtimeKeywordsResponse> {\r\n    const queryString = buildQueryString(params)\r\n    return apiFetch<RealtimeKeywordsResponse>(`/v1/keywords/realtime${queryString}`)\r\n  }\r\n} \r\n\r\n \r\n\r\n// 🆕 사전 관련 타입 정의\r\nexport interface DictionaryEnvironmentType {\r\n  CURRENT: \"CURRENT\"\r\n  DEV: \"DEV\" \r\n  PROD: \"PROD\"\r\n}\r\n\r\nexport interface SynonymDictionaryItem {\r\n  id: number\r\n  keyword: string\r\n  description?: string\r\n  createdAt: string\r\n  updatedAt: string\r\n}\r\n\r\nexport interface TypoCorrectionDictionaryItem {\r\n  id: number\r\n  keyword: string\r\n  correctedWord: string\r\n  description?: string\r\n  createdAt: string\r\n  updatedAt: string\r\n}\r\n\r\nexport interface StopwordDictionaryItem {\r\n  id: number\r\n  keyword: string\r\n  description?: string\r\n  createdAt: string\r\n  updatedAt: string\r\n}\r\n\r\nexport interface UserDictionaryItem {\r\n  id: number\r\n  keyword: string\r\n  description?: string\r\n  createdAt: string\r\n  updatedAt: string\r\n}\r\n\r\nexport interface DictionaryPageResponse<T> {\r\n  content: T[]\r\n  page: number\r\n  size: number\r\n  totalElements: number\r\n  totalPages: number\r\n  first: boolean\r\n  last: boolean\r\n}\r\n\r\nexport interface RealtimeSyncResponse {\r\n  success: boolean\r\n  message: string\r\n  environment: string\r\n  timestamp: number\r\n}\r\n\r\nexport interface SyncStatusResponse {\r\n  success: boolean\r\n  typoCorrectionStatus: string\r\n  lastSyncTime: number\r\n  timestamp: number\r\n}\r\n\r\n// 🆕 동의어 사전 API 함수들\r\n// 사전/대시보드 API는 services 레이어의 *DictionaryService, dashboardApi 를 사용하십시오.\r\n\r\n// 실시간 반영 API는 각 사전 서비스에서 제공되므로 삭제\r\n\r\n// 🆕 검색 API 업데이트 (오타교정 옵션 추가)\r\nexport const enhancedSearchApi = {\r\n  // 상품 검색 실행 (오타교정 옵션 포함)\r\n  async executeSearch(params: {\r\n    query: string\r\n    page: number\r\n    size: number\r\n    // applyTypoCorrection?: boolean - 백엔드에서 미지원\r\n    sortField?: string\r\n    sortOrder?: string\r\n    brand?: string[]\r\n    category?: string[]\r\n    priceFrom?: number\r\n    priceTo?: number\r\n  }): Promise<SearchResponse> {\r\n    const queryString = buildQueryString(params)\r\n    return apiFetch<SearchResponse>(`/v1/search${queryString}`)\r\n  },\r\n\r\n  // 검색 시뮬레이션 (오타교정 옵션 포함)\r\n  async simulateSearch(params: {\r\n    query: string\r\n    page: number\r\n    size: number\r\n    environmentType: string\r\n    explain?: boolean\r\n    // applyTypoCorrection?: boolean - 백엔드에서 미지원\r\n    sortField?: string\r\n    sortOrder?: string\r\n    brand?: string[]\r\n    category?: string[]\r\n    priceFrom?: number\r\n    priceTo?: number\r\n  }): Promise<SearchResponse> {\r\n    const queryString = buildQueryString(params)\r\n    return apiFetch<SearchResponse>(`/v1/search/simulation${queryString}`)\r\n  },\r\n\r\n  // 🆕 자동완성 시뮬레이션\r\n  async simulateAutocomplete(params: {\r\n    keyword: string\r\n    environmentType: string\r\n  }): Promise<AutocompleteResponse> {\r\n    const queryString = buildQueryString(params)\r\n    return apiFetch<AutocompleteResponse>(`/v1/search/autocomplete/simulation${queryString}`)\r\n  }\r\n} \r\n\r\n// 🆕 검색 로그 API 함수들\r\n ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\lib\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\lib\\errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\lib\\logger.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\lib\\query-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\lib\\search-session.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\lib\\utils.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[309,312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[309,312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { clsx, type ClassValue } from \"clsx\"\r\nimport { twMerge } from \"tailwind-merge\"\r\n\r\nexport function cn(...inputs: ClassValue[]) {\r\n  return twMerge(clsx(inputs))\r\n}\r\n\r\nexport function formatDate(date: Date): string {\r\n  return date.toISOString().split('T')[0];\r\n}\r\n\r\nexport function safeArray<T>(value: any): T[] {\r\n  return Array.isArray(value) ? value : [];\r\n}\r\n","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\router\\index.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\click-logs\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\click-logs\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\click-logs\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\common\\api-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\common\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\dashboard\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\dashboard\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\deployment\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\deployment\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\deployment\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\dictionary\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\dictionary\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\evaluation\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\evaluation\\types.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\search-logs\\api.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\services\\search-logs\\types.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-interface","severity":1,"message":"An interface declaring no members is equivalent to its supertype.","line":35,"column":18,"nodeType":"Identifier","messageId":"noEmptyWithSuper","endLine":35,"endColumn":35,"fix":{"range":[761,813],"text":"type SearchLogResponse = SearchLogItem"}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"import type { PageResponse, SearchParams, DateRangeParams } from '../common/types'\r\n\r\n// 검색 로그 아이템\r\nexport interface SearchLogItem {\r\n  id: string\r\n  timestamp: string\r\n  searchKeyword: string\r\n  indexName: string\r\n  responseTimeMs: number\r\n  resultCount: number\r\n  clientIp: string\r\n  userAgent: string\r\n  isError: boolean\r\n  errorMessage?: string\r\n  searchSessionId?: string\r\n  searchParams?: {\r\n    size: number\r\n    page: number\r\n    filters: Record<string, string[]>\r\n    sort: {\r\n      sortType: string\r\n      sortOrder: string\r\n    }\r\n  }\r\n}\r\n\r\n// 검색 로그 페이지 응답\r\nexport interface SearchLogPageResponse extends PageResponse<SearchLogItem> {\r\n  currentPage: number\r\n  hasNext: boolean\r\n  hasPrevious: boolean\r\n}\r\n\r\n// 검색 로그 상세 응답 (목록 아이템과 동일 필드 가정)\r\nexport interface SearchLogResponse extends SearchLogItem {}\r\n\r\n\r\n// 검색 로그 파라미터\r\nexport interface SearchLogParams extends SearchParams, DateRangeParams {\r\n  keyword?: string\r\n  indexName?: string\r\n  isError?: boolean\r\n  clientIp?: string\r\n  minResponseTime?: number\r\n  maxResponseTime?: number\r\n  minResultCount?: number\r\n  maxResultCount?: number\r\n  sort?: SearchLogSortField\r\n  order?: SearchLogSortDirection\r\n  searchSessionId?: string\r\n}\r\n\r\n// 정렬 필드 및 방향\r\nexport type SearchLogSortField = 'timestamp' | 'responseTime' | 'resultCount' | 'searchKeyword'\r\nexport type SearchLogSortDirection = 'asc' | 'desc'\r\n\r\n// 인기 검색어 아이템\r\nexport interface PopularKeywordItem {\r\n  rank: number\r\n  keyword: string\r\n  searchCount: number\r\n  percentage: number\r\n  previousRank: number\r\n  rankChange: number\r\n}\r\n\r\n// 인기 검색어 응답\r\nexport interface PopularKeywordsResponse {\r\n  keywords: PopularKeywordItem[]\r\n  totalSearches: number\r\n  period: {\r\n    from: string\r\n    to: string\r\n  }\r\n}\r\n\r\n// 급상승 검색어 아이템\r\nexport interface TrendingKeywordItem {\r\n  rank: number\r\n  keyword: string\r\n  currentCount: number\r\n  previousCount: number\r\n  growthRate: number\r\n  velocity: number\r\n}\r\n\r\n// 급상승 검색어 응답\r\nexport interface TrendingKeywordsResponse {\r\n  keywords: TrendingKeywordItem[]\r\n  period: {\r\n    current: {\r\n      from: string\r\n      to: string\r\n    }\r\n    previous: {\r\n      from: string\r\n      to: string\r\n    }\r\n  }\r\n}\r\n\r\n// 자동완성 아이템\r\nexport interface AutocompleteSuggestion {\r\n  keyword: string\r\n  searchCount: number\r\n  lastSearched: string\r\n}\r\n\r\n// 자동완성 응답\r\nexport interface AutocompleteResponse {\r\n  suggestions: AutocompleteSuggestion[]\r\n}\r\n\r\n// 검색 로그 통계 요약\r\nexport interface SearchLogSummary {\r\n  summary: {\r\n    totalSearches: number\r\n    uniqueKeywords: number\r\n    averageResponseTime: number\r\n    errorRate: number\r\n    zeroResultRate: number\r\n    averageResultCount: number\r\n  }\r\n  topSearchHours: Array<{\r\n    hour: number\r\n    searchCount: number\r\n  }>\r\n  searchByIndexName: Record<string, number>\r\n}\r\n\r\n// 검색 로그 등록 요청\r\nexport interface CreateSearchLogRequest {\r\n  searchKeyword: string\r\n  indexName: string\r\n  clientIp: string\r\n  userAgent: string\r\n  responseTimeMs: number\r\n  resultCount: number\r\n  isError: boolean\r\n  errorMessage?: string\r\n  searchSessionId?: string\r\n  searchParams: {\r\n    size: number\r\n    page: number\r\n    filters: Record<string, string[]>\r\n    sort: {\r\n      sortType: string\r\n      sortOrder: string\r\n    }\r\n  }\r\n}\r\n\r\n// 검색 로그 등록 응답\r\nexport interface CreateSearchLogResponse {\r\n  id: string\r\n  timestamp: string\r\n  message: string\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\types\\dashboard.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\types\\deploy.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\utils\\evaluation-helpers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3491,3494],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3491,3494],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { AsyncTaskStatus } from '@/services/evaluation/types'\r\n\r\n/**\r\n * 날짜 포맷팅 (한국어)\r\n */\r\nexport function formatDate(dateString: string): string {\r\n  return new Date(dateString).toLocaleString('ko-KR')\r\n}\r\n\r\n/**\r\n * 성능 점수에 따른 색상 클래스 반환\r\n */\r\nexport function getPerformanceColor(score: number): string {\r\n  if (score >= 0.8) return \"text-green-600\"\r\n  if (score >= 0.6) return \"text-yellow-600\" \r\n  return \"text-red-600\"\r\n}\r\n\r\n/**\r\n * 비동기 작업 진행률 표시 텍스트 생성\r\n */\r\nexport function getTaskProgressText(\r\n  taskStatus: AsyncTaskStatus | undefined,\r\n  defaultText: string,\r\n  _startingText: string = '시작중...'\r\n): string {\r\n  if (!taskStatus) return defaultText\r\n  \r\n  const progress = taskStatus.progress || 0\r\n  let countInfo = ''\r\n  \r\n  try {\r\n    if (taskStatus.result) {\r\n      const result = JSON.parse(taskStatus.result)\r\n      \r\n      // 다양한 진행률 표시 형식 지원\r\n      if (result.currentIndex && result.totalCount) {\r\n        countInfo = ` (${result.currentIndex}/${result.totalCount})`\r\n      } else if (result.processedCount && result.totalCount) {\r\n        countInfo = ` (${result.processedCount}/${result.totalCount})`\r\n      } else if (result.evaluatedCount && result.totalCount) {\r\n        countInfo = ` (${result.evaluatedCount}/${result.totalCount})`\r\n      } else if (result.generatedCount && result.targetCount) {\r\n        countInfo = ` (${result.generatedCount}/${result.targetCount})`\r\n      }\r\n    }\r\n  } catch {\r\n    // JSON 파싱 실패 시 무시\r\n  }\r\n  \r\n  return `진행중 ${progress}%${countInfo}`\r\n}\r\n\r\n/**\r\n * 작업 완료 알림 메시지 생성\r\n */\r\nexport function getTaskCompletionMessage(\r\n  taskType: 'QUERY_GENERATION' | 'CANDIDATE_GENERATION' | 'LLM_EVALUATION',\r\n  result?: string | null\r\n): string {\r\n  const baseMessages = {\r\n    QUERY_GENERATION: '쿼리 생성 완료!',\r\n    CANDIDATE_GENERATION: '후보군 생성 완료!',\r\n    LLM_EVALUATION: 'LLM 평가 완료!'\r\n  }\r\n\r\n  let message = `🎉 ${baseMessages[taskType]}`\r\n\r\n  if (result && taskType === 'QUERY_GENERATION') {\r\n    try {\r\n      const parsed = JSON.parse(result)\r\n      if (parsed.generatedCount) {\r\n        message += `\\n생성된 쿼리: ${parsed.generatedCount}개`\r\n      }\r\n    } catch {\r\n      // JSON 파싱 실패 시 기본 메시지 사용\r\n    }\r\n  }\r\n\r\n  return message\r\n}\r\n\r\n/**\r\n * 페이지네이션 범위 계산\r\n */\r\nexport function calculatePaginationRange(\r\n  currentPage: number, \r\n  totalPages: number, \r\n  maxVisible: number = 5\r\n): { startPage: number; endPage: number } {\r\n  let startPage = Math.max(0, currentPage - Math.floor(maxVisible / 2))\r\n  const endPage = Math.min(totalPages - 1, startPage + maxVisible - 1)\r\n  \r\n  // 끝에서 역산하여 시작 페이지 조정\r\n  if (endPage - startPage + 1 < maxVisible) {\r\n    startPage = Math.max(0, endPage - maxVisible + 1)\r\n  }\r\n\r\n  return { startPage, endPage }\r\n}\r\n\r\n/**\r\n * 선택된 항목 수에 따른 상태 계산\r\n */\r\nexport function calculateSelectionState(\r\n  items: Array<{ id: number }>,\r\n  selectedIds: number[]\r\n): {\r\n  selectedInCurrentPage: number[]\r\n  isAllSelected: boolean\r\n  isIndeterminate: boolean\r\n} {\r\n  const currentPageIds = items.map(item => item.id)\r\n  const selectedInCurrentPage = currentPageIds.filter(id => selectedIds.includes(id))\r\n  const isAllSelected = items.length > 0 && selectedInCurrentPage.length === items.length\r\n  const isIndeterminate = selectedInCurrentPage.length > 0 && selectedInCurrentPage.length < items.length\r\n\r\n  return {\r\n    selectedInCurrentPage,\r\n    isAllSelected,\r\n    isIndeterminate\r\n  }\r\n}\r\n\r\n/**\r\n * 평가 결과 상세 데이터 파싱\r\n */\r\nexport function parseEvaluationDetails(detailedResults: string): {\r\n  success: boolean\r\n  queryDetails?: any[]\r\n  error?: string\r\n} {\r\n  try {\r\n    const details = JSON.parse(detailedResults)\r\n    const queryDetails = Array.isArray(details) ? details : details.queryDetails\r\n    \r\n    if (queryDetails && Array.isArray(queryDetails) && queryDetails.length > 0) {\r\n      return { success: true, queryDetails }\r\n    } else {\r\n      return { \r\n        success: false, \r\n        error: '쿼리별 상세 결과 데이터가 없거나 형식이 올바르지 않습니다.' \r\n      }\r\n    }\r\n  } catch (_e) {\r\n    return { \r\n      success: false, \r\n      error: '상세 결과 데이터를 해석할 수 없습니다. 백엔드 데이터 형식을 확인해주세요.' \r\n    }\r\n  }\r\n} ","usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\src\\vite-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]},{"filePath":"C:\\Users\\lyj\\Desktop\\vscode_workspace\\search-admin-fe\\vite.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[{"ruleId":"@typescript-eslint/no-empty-interface","replacedBy":["@typescript-eslint/no-empty-object-type"],"info":{"deprecatedSince":"8.0.0","replacedBy":[{"rule":{"name":"@typescript-eslint/no-empty-object-type","url":"https://typescript-eslint.io/rules/no-empty-object-type"}}],"url":"https://github.com/typescript-eslint/typescript-eslint/pull/8977"}}]}]
