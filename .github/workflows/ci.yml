name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'ci/**' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      # TODO: lint 오류 수정 필요
      # - name: Run linter
      #   run: npm run lint
      
      - name: Build application
        run: npm run build
      
      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist
          retention-days: 1

  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/ci/'))
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist
      
      - name: Deploy to EC2
        env:
          KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$KEY" > key.pem
          chmod 600 key.pem
          
          # 파일 전송 
          tar -czf dist.tar.gz dist/
          ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} "mkdir -p ~/search-admin-fe"
          scp -o StrictHostKeyChecking=no -i key.pem dist.tar.gz Dockerfile docker-compose.yml nginx.conf ${USER}@${HOST}:~/search-admin-fe/
          
          # 배포 실행
          ssh -o StrictHostKeyChecking=no -i key.pem ${USER}@${HOST} << 'EOF'
            cd ~/search-admin-fe
            tar -xzf dist.tar.gz
            rm dist.tar.gz
            
            # 네트워크 생성
            docker network create search-admin-network 2>/dev/null || true
            
            # Docker 빌드 및 재시작
            docker compose down
            docker build -t search-admin-fe .
            docker compose up -d
            
            # 이전 이미지 정리
            docker image prune -f
          EOF
          
          rm key.pem
          rm dist.tar.gz